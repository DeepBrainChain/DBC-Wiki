import{_ as r,a as c,b as d,c as p,d as u,e as b,f as h,g as m}from"./image-20210121235451552-9d99bf88.js";import{_ as g,H as o,W as v,X as f,a0 as i,Y as e,Z as n,$ as s,a1 as k}from"./framework-2c7d842c.js";const y="/DBC-Wiki/assets/image-20210323095232363-8bf4ed5d.png",w="/DBC-Wiki/assets/image-20210329095613442-b9531339.png",x={},_={href:"https://www.dbcwallet.io/?rpc=wss://info1.dbcwallet.io#/accounts",target:"_blank",rel:"noopener noreferrer"},C={href:"https://www.dbcwallet.io/?rpc=wss://info1.dbcwallet.io#/",target:"_blank",rel:"noopener noreferrer"},z={href:"https://telemetry.polkadot.io/#list/0x03aa6b475a03f8baf7f83e448513b00eaab03aefa4ed64bd1d31160dce028add",target:"_blank",rel:"noopener noreferrer"},B={href:"http://DeepL.com",target:"_blank",rel:"noopener noreferrer"};function q(I,a){const l=o("RouterLink"),t=o("ExternalLinkIcon");return v(),f("div",null,[a[14]||(a[14]=i('<h1 id="become-a-verified-node-on-the-dbc-ai-public-chain" tabindex="-1"><a class="header-anchor" href="#become-a-verified-node-on-the-dbc-ai-public-chain" aria-hidden="true">#</a> Become a verified node on the DBC AI public chain</h1><p><strong>Note: 1. Before you start the execution, be sure to use a new db_data to start the node to prevent data synchronization errors, which will cause you to be unable to generate blocks and be punished. 2. If you have participated in the election or started a new node, please generate a new sessionkey in time and replace it in the Staking-Account section</strong></p><h2 id="_0-machine-configuration" tabindex="-1"><a class="header-anchor" href="#_0-machine-configuration" aria-hidden="true">#</a> 0. Machine Configuration</h2><ul><li>RAM: 8G</li><li>CPU: 2 cores</li><li>Hard disk: 300G+ (500G recommended)</li><li>System: Ubuntu 20.04 and above (22.04 recommended)</li></ul><h2 id="_1-generate-funding-account-existing-funding-account-can-be-skipped" tabindex="-1"><a class="header-anchor" href="#_1-generate-funding-account-existing-funding-account-can-be-skipped" aria-hidden="true">#</a> 1. Generate funding account (existing funding account can be skipped)</h2>',5)),e("p",null,[a[1]||(a[1]=n("Reference: ")),s(l,{to:"/kr/staking-model/generate-new-account.html"},{default:k(()=>a[0]||(a[0]=[n("How to generate account")])),_:1})]),a[15]||(a[15]=i(`<h2 id="_2-get-dbc-chain-binary" tabindex="-1"><a class="header-anchor" href="#_2-get-dbc-chain-binary" aria-hidden="true">#</a> 2. Get dbc-chain binary</h2><h3 id="way-1-use-the-precompiled-version" tabindex="-1"><a class="header-anchor" href="#way-1-use-the-precompiled-version" aria-hidden="true">#</a> Way 1: Use the precompiled version</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">mkdir</span> dbc-chain-mainnet <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> dbc-chain-mainnet

<span class="token function">wget</span> https://github.com/DeepBrainChain/DeepBrainChain-MainChain/releases/download/v4.0/dbc-chain-4.tar.gz <span class="token parameter variable">-O</span> dbc_chain_linux_x64.tar.gz

<span class="token function">tar</span> xf dbc_chain_linux_x64.tar.gz 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="way-2-compiling-from-source-code" tabindex="-1"><a class="header-anchor" href="#way-2-compiling-from-source-code" aria-hidden="true">#</a> Way 2: Compiling from source code</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">### Install dependencies</span>
<span class="token function">curl</span> https://getsubstrate.io <span class="token parameter variable">-sSf</span> <span class="token operator">|</span> <span class="token function">bash</span> <span class="token parameter variable">-s</span> -- <span class="token parameter variable">--fast</span>
<span class="token builtin class-name">source</span> ~/.cargo/env

<span class="token comment"># Compile dbc-chain</span>
<span class="token function">git</span> clone https://github.com/DeepBrainChain/DeepBrainChain-MainChain.git
<span class="token builtin class-name">cd</span> DeepBrainChain-MainChain
<span class="token function">cargo</span> build <span class="token parameter variable">--release</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-run-the-synchronization-node" tabindex="-1"><a class="header-anchor" href="#_3-run-the-synchronization-node" aria-hidden="true">#</a> 3. Run the synchronization node</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">nohup</span> ./dbc-chain --base-path ./db_data <span class="token parameter variable">--chain</span><span class="token operator">=</span>mainnet <span class="token parameter variable">--port</span> <span class="token number">30333</span> --rpc-port <span class="token number">9983</span> <span class="token parameter variable">--pruning</span><span class="token operator">=</span>archive <span class="token parameter variable">--name</span> dbc-chain --rpc-cors<span class="token operator">=</span>all --rpc-methods<span class="token operator">=</span>unsafe --rpc-external  <span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>dbc_node.log <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>If you are compiling from source, the path to the executable is: <code>. /target/release/dbc-chain</code>.</p></li><li><p>When synchronization is complete, <code>Control + C</code> closes the program. You can tell if the synchronization has completed by comparing <code>target</code> to <code>best</code>. When the difference between target and best is small (e.g., within 100), you can assume that the synchronization is complete.</p></li></ul><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><strong>Parameter description:</strong><ul><li><code>--base-path</code>: specifies the directory where this blockchain stores data. If not specified, the default path will be used. If the directory does not exist, it will be automatically created for you. If the directory already has blockchain data, an error will be reported and you should choose a different directory or clear the contents of that directory.</li><li><code>--pruning=archive</code>: start the blockchain as archive</li></ul></li></ul><h2 id="_4-run-the-node-as-a-verifier" tabindex="-1"><a class="header-anchor" href="#_4-run-the-node-as-a-verifier" aria-hidden="true">#</a> 4. Run the node as a verifier</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Start the node</span>

<span class="token function">nohup</span> ./dbc-chain --base-path ./db_data <span class="token parameter variable">--chain</span><span class="token operator">=</span>mainnet <span class="token parameter variable">--port</span> <span class="token number">30333</span> --rpc-port <span class="token number">9983</span> <span class="token parameter variable">--validator</span> <span class="token parameter variable">--pruning</span><span class="token operator">=</span>archive <span class="token parameter variable">--name</span> YourNodeName --rpc-cors<span class="token operator">=</span>all --rpc-methods<span class="token operator">=</span>unsafe --rpc-external  <span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>dbc_node.log <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>

<span class="token comment"># If you get a startup error</span>

<span class="token builtin class-name">.</span> /dbc-chain: /lib/x86_64-linux-gnu/libstdc++.so.6: version <span class="token variable"><span class="token variable">\`</span>GLIBCXX_3.4.30&#39; not found <span class="token punctuation">(</span>required by <span class="token builtin class-name">.</span> /dbc-chain<span class="token punctuation">)</span>
<span class="token builtin class-name">.</span> /dbc-chain: /lib/x86_64-linux-gnu/libstdc++.so.6: version <span class="token variable">\`</span></span>GLIBCXX_3.4.29<span class="token string">&#39; not found (required by . /dbc-chain)
. /dbc-chain: /lib/x86_64-linux-gnu/libc.so.6: version \`GLIBC_2.32&#39;</span> not found <span class="token punctuation">(</span>required by <span class="token builtin class-name">.</span> /dbc-chain<span class="token punctuation">)</span>
<span class="token builtin class-name">.</span> /dbc-chain: /lib/x86_64-linux-gnu/libc.so.6: version <span class="token variable"><span class="token variable">\`</span>GLIBC_2.34&#39; not found <span class="token punctuation">(</span>required by <span class="token builtin class-name">.</span> /dbc-chain<span class="token punctuation">)</span>
<span class="token builtin class-name">.</span> /dbc-chain: /lib/x86_64-linux-gnu/libc.so.6: version <span class="token variable">\`</span></span>GLIBC_2.33&#39; not found <span class="token punctuation">(</span>required by <span class="token builtin class-name">.</span> /dbc-chain<span class="token punctuation">)</span>


<span class="token comment"># Solution:</span>

<span class="token comment">#1. devices in China region:</span>
<span class="token builtin class-name">echo</span> “deb http://mirrors.aliyun.com/ubuntu/ jammy main” <span class="token operator">&gt;&gt;</span> /etc/apt/sources.list
<span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libc6 libstdc++6 <span class="token parameter variable">-y</span>
<span class="token comment">#For non-Chinese devices, echo “deb  jammy main”:</span>
<span class="token builtin class-name">echo</span> “deb http://archive.ubuntu.com/ubuntu/ jammy main” <span class="token operator">&gt;&gt;</span> /etc/apt/sources.list
<span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libc6 libstdc++6 <span class="token parameter variable">-y</span>
- If you are compiling from source, the path to the executable is: <span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">.</span> /target/release/dbc-chain<span class="token variable">\`</span></span><span class="token builtin class-name">.</span>

- Note that here **<span class="token variable"><span class="token variable">\`</span><span class="token parameter variable">--name</span> YourNodeName<span class="token variable">\`</span></span> is to <span class="token builtin class-name">set</span> your <span class="token function">node</span> name**, you can give your <span class="token function">node</span> a unique and easily recognizable name and others will be able to see it on the network.

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-generating-a-rotatekey" tabindex="-1"><a class="header-anchor" href="#_5-generating-a-rotatekey" aria-hidden="true">#</a> 5. Generating a <code>rotateKey</code></h2><p>Run the following command on the machine where you are running the verifier node command</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type: application/json&quot;</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;{&quot;id&quot;:1, &quot;jsonrpc&quot;:&quot;2.0&quot;, &quot;method&quot;: &quot;author_rotateKeys&quot;, &quot;params&quot;:[]}&#39;</span> http://localhost:9983
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_6-setting-the-bond-amount" tabindex="-1"><a class="header-anchor" href="#_6-setting-the-bond-amount" aria-hidden="true">#</a> 6. Setting the bond amount</h2>`,16)),e("ul",null,[e("li",null,[e("p",null,[a[4]||(a[4]=n("Open [")),e("a",_,[a[2]||(a[2]=n("https://www.dbcwallet.io/?rpc=wss://info1.dbcwallet.io#/accounts")),s(t)]),a[5]||(a[5]=n("](")),e("a",C,[a[3]||(a[3]=n("https://www.dbcwallet.io/?rpc=wss://info1.dbcwallet.io#/")),s(t)]),a[6]||(a[6]=n(" accounts) You will be able to see your balance:"))])]),a[7]||(a[7]=e("li",null,[e("p",null,[n("Navigate to "),e("code",null,"Network"),n(" > "),e("code",null,"Pledge"),n(" > "),e("code",null,"Account Operations"),n(" > "),e("code",null,"Storage Accounts"),n(".")])],-1))]),a[16]||(a[16]=i('<figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>Set the amount of the bond (make sure that in addition to the bond amount, you have a balance in your account to use to send the transaction):</li></ul><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>Description:</strong></p><ul><li><p><code>Stash account</code>: your funding account, here we bond 45 DBC, make sure there is at least this much balance in the account</p></li><li><p><code>controller account</code>: this account should also have a small amount of DBC to send start and stop verifier transactions</p></li><li><p><code>value bonded</code>: how many DBC you want to bond/stake, please note that you don&#39;t need to bond the entire balance in the account, plus you can increase the bond amount later.</p></li><li><p><code>payment destination</code>: the reward the verifier gets will be sent to this account. This account can be set to any account. Among others.</p></li><li><p><code>Stash account(increase the amount at stake)</code>: the proceeds are issued to the stash account and are pledged</p></li><li><p><code>Stash account(do not increase the amount at stake)</code>: proceeds are issued to the stash account and are not pledged</p></li></ul><h2 id="_7-setting-up-the-rotatekey" tabindex="-1"><a class="header-anchor" href="#_7-setting-up-the-rotatekey" aria-hidden="true">#</a> 7. Setting up the `rotateKey</h2><ul><li>After executing the bond, you will be able to see the <code>Session Key</code> button on Polkadot:</li></ul><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>Click on it and populate it with the <code>rotateKeys</code> generated in step 5.</li></ul><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',10)),e("ul",null,[e("li",null,[a[9]||(a[9]=n("Now you can go to ")),e("a",z,[a[8]||(a[8]=n("Telemetry")),s(t)]),a[10]||(a[10]=n(" and see your node! !"))])]),a[17]||(a[17]=i('<figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_8-setting-up-participation-in-the-validator-election" tabindex="-1"><a class="header-anchor" href="#_8-setting-up-participation-in-the-validator-election" aria-hidden="true">#</a> 8. Setting Up Participation in the Validator Election</h2><ul><li>After completing the above steps, you will be able to see the <code>Validate</code> button. Click on the <code>Validate</code> button.</li></ul><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>At this point you will need to set the Validator Preferences:</li></ul><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>In the <code>reward commission percentage</code> field, you will need to enter your revenue preference as a verifier. Then click <code>Validate</code> in the bottom right corner and send the transaction. In the <code>Waiting</code> screen, you will be able to see that your account is waiting for the next <code>Era</code>, to participate in the election to become a Validator node.</li></ul><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_9-claiming-node-rewards" tabindex="-1"><a class="header-anchor" href="#_9-claiming-node-rewards" aria-hidden="true">#</a> 9. Claiming node rewards</h2><p>Login to your stash account in the browser plugin polkadot and in <code>Pledge &gt; Payments &gt; Max 84 eras</code> you will be able to see all pending rewards:</p><figure><img src="'+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Just click <code>Pay All</code> on the right side and send the transaction.</p>',12)),e("p",null,[a[12]||(a[12]=n("Translated with ")),e("a",B,[a[11]||(a[11]=n("DeepL.com")),s(t)]),a[13]||(a[13]=n(" (free version)"))])])}const N=g(x,[["render",q],["__file","dbc-ai-public-chain-pos_en.html.vue"]]);export{N as default};
