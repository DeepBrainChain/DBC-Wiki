import{_ as l,H as i,W as r,X as d,Y as a,Z as n,$ as o,a0 as s}from"./framework-0c0bf18e.js";const p="/DBC-Wiki/assets/image-20210126021938613-ed5880e3.png",c="/DBC-Wiki/assets/image-20210121194808850-652c90b7.png",u="/DBC-Wiki/assets/image-20210121194953014-2c0cbcd6.png",m="/DBC-Wiki/assets/image-20210121195033167-2f9f22c6.png",b="/DBC-Wiki/assets/image-20210121195307711-9ce5490a.png",g="/DBC-Wiki/assets/image-20210121200709277-b82ea79b.png",h="/DBC-Wiki/assets/image-20210121234945030-f232b1a0.png",v="/DBC-Wiki/assets/image-20210121235144583-06df3d13.png",f="/DBC-Wiki/assets/image-20210121235217665-a5da9a91.png",k="/DBC-Wiki/assets/image-20210121235451552-5c7ff86d.png",y="/DBC-Wiki/assets/image-20210329095933403-93a21fd2.png",w={},x={start:"0"},C={href:"https://chrome.google.com/webstore/detail/polkadot%7Bjs%7D-extension/mopnmbcafieddcagagdcbnhejhlodfdd",target:"_blank",rel:"noopener noreferrer"},D={href:"https://addons.mozilla.org/en-US/firefox/addon/polkadot-js-extension/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://www.dbcwallet.io/?rpc=wss%3A%2F%2Finfo.dbcwallet.io#/accounts",target:"_blank",rel:"noopener noreferrer"},z={start:"4"},S={href:"https://www.dbcwallet.io/?rpc=wss%3A%2F%2Finfo.dbcwallet.io#/accounts",target:"_blank",rel:"noopener noreferrer"},W={href:"https://telemetry.polkadot.io/#list/0xd523fa2e0581f069b4f0c7b5944c21e9abc72305a08067868c91b898d1bf1dff",target:"_blank",rel:"noopener noreferrer"};function q(A,e){const t=i("ExternalLinkIcon");return r(),d("div",null,[e[33]||(e[33]=a("h1",{id:"how-to-run-a-dbc-validator",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#how-to-run-a-dbc-validator","aria-hidden":"true"},"#"),n(" How to run a DBC validator?")],-1)),a("ol",x,[e[14]||(e[14]=a("li",null,[a("p",null,"Recommended hardware"),a("ul",null,[a("li",null,"RAM：8G"),a("li",null,"CPU：2 cores"),a("li",null,"Disk：100G")])],-1)),a("li",null,[e[13]||(e[13]=a("p",null,"Generate stash account （If you already have stash account, you can skip this）",-1)),a("ul",null,[a("li",null,[e[4]||(e[4]=a("p",null,[n("Option 1: Install "),a("code",null,"polkadot{.js}"),n(" adds-on")],-1)),a("ul",null,[a("li",null,[e[1]||(e[1]=n("Chrome, install via ")),a("a",C,[e[0]||(e[0]=n("Chrome web store")),o(t)])]),a("li",null,[e[3]||(e[3]=n("Firefox, install via ")),a("a",D,[e[2]||(e[2]=n("Firefox add-ons")),o(t)])])]),e[5]||(e[5]=a("p",null,[n("Then generate by "),a("code",null,"polkadot{.js}")],-1))]),a("li",null,[a("p",null,[e[7]||(e[7]=n("Option 2: Generate account from ")),a("a",B,[e[6]||(e[6]=n("https://www.dbcwallet.io/?rpc=wss%3A%2F%2Finfo.dbcwallet.io#/accounts")),o(t)]),e[8]||(e[8]=n("，click ")),e[9]||(e[9]=a("code",null,"Account",-1)),e[10]||(e[10]=n(" -- ")),e[11]||(e[11]=a("code",null,"Add account",-1))])]),e[12]||(e[12]=s(`<li><p>Option 3: Generate by command line:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">--proto</span> <span class="token string">&#39;=https&#39;</span> <span class="token parameter variable">--tlsv1.2</span> <span class="token parameter variable">-sSf</span> https://sh.rustup.rs <span class="token operator">|</span> <span class="token function">sh</span>
<span class="token function">cargo</span> <span class="token function">install</span> <span class="token parameter variable">--force</span> subkey <span class="token parameter variable">--git</span> https://github.com/paritytech/substrate <span class="token parameter variable">--version</span> <span class="token number">2.0</span>.1 <span class="token parameter variable">--locked</span>
subkey generate <span class="token parameter variable">--scheme</span> sr25519
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1))])]),e[15]||(e[15]=s(`<li><p>Get <code>dbc-chain</code> binary</p><ul><li><p>Option 1: use pre-build version (If any errors, please use Option 2).</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>wget https://github.com/DeepBrainChain/DeepBrainChain-MainChain/releases/download/v2/dbc_chain_linux_x64.tar.gz -O dbc_chain_linux_x64.tar.gz
tar xf dbc_chain_linux_x64.tar.gz &amp;&amp; cd dbc-chain-mainnet
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Option 2: compile from source (recommended)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># install dependency</span>
<span class="token function">curl</span> https://getsubstrate.io <span class="token parameter variable">-sSf</span> <span class="token operator">|</span> <span class="token function">bash</span> <span class="token parameter variable">-s</span> -- <span class="token parameter variable">--fast</span>
<span class="token builtin class-name">source</span> ~/.cargo/env

<span class="token comment"># compile dbc-chain</span>
<span class="token function">git</span> clone https://github.com/DeepBrainChain/DeepBrainChain-MainChain.git
<span class="token builtin class-name">cd</span> DeepBrainChain-MainChain
<span class="token function">cargo</span> build <span class="token parameter variable">--release</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>Synchronize Chain Data</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./dbc-chain --base-path ./db_data <span class="token parameter variable">--chain</span> ./dbcSpecRaw.json <span class="token parameter variable">--pruning</span><span class="token operator">=</span>archive <span class="token parameter variable">--bootnodes</span> /ip4/47.74.88.41/tcp/8947/p2p/12D3KooWD87i4TKA68P7zpGNXxUaHgvnimbgihEzDyJrmG3iGJPw
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>If you compile from source, the binary path is <code>./target/release/dbc-chain</code></li></ul></li>`,2))]),e[34]||(e[34]=s('<ul><li>After finished synchronize, type <code>Control + C</code> to close the above command. You can compare <code>target</code> and <code>best</code> to infer if sync is finished. When <code>target</code> is closed (100 blocks, for example) to <code>best</code> , it can be regard sync is finished.<img src="'+p+'" alt="image-20210126021938613" loading="lazy"><ul><li><strong>Flags in detail：</strong></li><li><code>--base-path</code>：Specifies a directory where Substrate should store all the data related to this chain. If this value is not specified, a default path will be used. If the directory does not exist it will be created for you. If other blockchain data already exists there you will get an error. Either clear the directory or choose a different one. <ul><li><code>--chain ./dbcSpecRaw.json</code>：Specifies which chain specification to use.</li><li><code>--pruning=archive</code>：synchronize chain data</li><li><code>--bootnodes</code>：specified a single boot node.</li></ul></li></ul></li></ul>',1)),a("ol",z,[e[31]||(e[31]=s(`<li><p>After synchronizing block data finished, stop the synchronizing command. Then run the node as a validator:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">nohup</span> ./dbc-chain --base-path ./db_data <span class="token parameter variable">--chain</span> ./dbcSpecRaw.json <span class="token parameter variable">--validator</span> <span class="token parameter variable">--name</span> YourNodeName <span class="token parameter variable">--bootnodes</span> /ip4/47.74.88.41/tcp/8947/p2p/12D3KooWD87i4TKA68P7zpGNXxUaHgvnimbgihEzDyJrmG3iGJPw <span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>dbc_node.log <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>If you compile from source, the binary path is <code>./target/release/dbc-chain</code></li><li>You can give your validator any name that you like, but note that others will be able to see it, and it will be included in the list of all servers using the same telemetry server. Since numerous people are using telemetry, it is recommended that you choose something likely to be unique.</li></ul></li><li><p>generate<code>rotateKey</code></p><p>Run the following command in the terminal, and record the result.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type: application/json&quot;</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;{&quot;id&quot;:1, &quot;jsonrpc&quot;:&quot;2.0&quot;, &quot;method&quot;: &quot;author_rotateKeys&quot;, &quot;params&quot;:[]}&#39;</span> http://localhost:9933
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>`,2)),a("li",null,[e[22]||(e[22]=a("p",null,"Bond stash",-1)),a("ul",null,[a("li",null,[a("p",null,[e[17]||(e[17]=n("open ")),a("a",S,[e[16]||(e[16]=n("https://www.dbcwallet.io/?rpc=wss%3A%2F%2Finfo.dbcwallet.io#/accounts")),o(t)]),e[18]||(e[18]=n(" you will see your balance: ")),e[19]||(e[19]=a("img",{src:c,alt:"image-20210121194808850",loading:"lazy"},null,-1))])]),e[20]||(e[20]=a("li",null,[a("p",null,[n("navigate to"),a("code",null,"Staking > Account actions"),n("，click "),a("code",null,"stash"),a("img",{src:u,alt:"image-20210121194953014",loading:"lazy"})])],-1)),e[21]||(e[21]=a("li",null,[a("p",null,[n("You should set bond balance（Make sure not to bond all your DBC balance since you will be unable to pay transaction fees from your bonded balance.）："),a("img",{src:m,alt:"image-20210121195033167",loading:"lazy"})])],-1))]),e[23]||(e[23]=s("<p><strong>Description：</strong></p><ul><li><code>Stash account</code>：Select your Stash account. In this example, we will bond 45 DBC - make sure that your Stash account contains <em>at least</em> this much. You can, of course, stake more than this.</li><li><code>controller account</code>：Select the Controller account created earlier. This account will also need a small amount of DBC in order to start and stop validating.</li><li><code>value bonded</code>：How much DBC from the Stash account you want to bond/stake. Note that you do not need to bond all of the DBC in that account. Also note that you can always bond <em>more</em> DBC later.</li><li><code>payment destination</code>：The account where the rewards from validating are sent.</li></ul>",2))]),a("li",null,[e[30]||(e[30]=a("p",null,"Set Session Keys",-1)),a("ul",null,[e[28]||(e[28]=a("li",null,[a("p",null,[n("After bond your stash，you can see in Polkadot UI "),a("code",null,"Session Key"),n("button："),a("img",{src:b,alt:"image-20210121195307711",loading:"lazy"})])],-1)),e[29]||(e[29]=a("li",null,[a("p",null,[n("click it and input the result in step 5"),a("code",null,"rotateKeys"),a("img",{src:g,alt:"image-20210121200709277",loading:"lazy"})])],-1)),a("li",null,[a("p",null,[e[25]||(e[25]=n("Now, check in ")),a("a",W,[e[24]||(e[24]=n("Telemetry")),o(t)]),e[26]||(e[26]=n(" and you can see your node.")),e[27]||(e[27]=a("img",{src:h,alt:"image-20210121234945030",loading:"lazy"},null,-1))])])])]),e[32]||(e[32]=s('<li><p>Validate</p><ul><li><p>After steps above you can see<code>Validate</code> button and click it,<img src="'+v+'" alt="image-20210121235144583" loading="lazy"></p></li><li><p>You should set your preference as a validator.<img src="'+f+'" alt="image-20210121235217665" loading="lazy"></p></li><li><p>In <code>reward commission percentage</code> you should input your commission preference. Then clieck <code>Validate</code> to send this transaction。Then，in <code>Waiting</code> page，you are waiting status<code>Era</code> to be a validator.<img src="'+k+'" alt="image-20210121235451552" loading="lazy"></p></li></ul></li>',1))]),e[35]||(e[35]=a("h2",{id:"how-to-get-your-rewards-payout",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#how-to-get-your-rewards-payout","aria-hidden":"true"},"#"),n(" How to get your rewards payout？")],-1)),e[36]||(e[36]=a("p",null,[n("Navigate to "),a("code",null,"Staking > Payouts > Max, 84 eras"),n(" ，you may see all the rewards to be payout：")],-1)),e[37]||(e[37]=a("figure",null,[a("img",{src:y,alt:"image-20210329095933403",tabindex:"0",loading:"lazy"}),a("figcaption",null,"image-20210329095933403")],-1)),e[38]||(e[38]=a("p",null,[n("chick "),a("code",null,"Payout all"),n(" button to send a transaction.")],-1))])}const j=l(w,[["render",q],["__file","join-dbc-network.html.vue"]]);export{j as default};
