import{_ as l,W as t,X as c,Y as n,Z as s,$ as e,a0 as i,H as o}from"./framework-5cecf6de.js";const p={},d=i(`<h1 id="安装-dbc-算力节点" tabindex="-1"><a class="header-anchor" href="#安装-dbc-算力节点" aria-hidden="true">#</a> 安装 DBC 算力节点</h1><h2 id="一-安装前准备-基于已配置好固定公网-ip-地址-部署-kvm-安装环境" tabindex="-1"><a class="header-anchor" href="#一-安装前准备-基于已配置好固定公网-ip-地址-部署-kvm-安装环境" aria-hidden="true">#</a> (一) 安装前准备(基于已配置好固定公网 ip 地址），部署 KVM 安装环境</h2><div class="hint-container tip"><p class="hint-container-title">注意！</p><p>系统采用 20.04 server 版本</p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;140.82.114.4 github.com&quot;</span>   <span class="token operator">&gt;&gt;</span> /etc/hosts
<span class="token function">sudo</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;199.232.5.194 github.global.ssl.fastly.net&quot;</span>   <span class="token operator">&gt;&gt;</span> /etc/hosts
<span class="token function">sudo</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;nameserver 8.8.4.4&quot;</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/resolv.conf <span class="token operator">&gt;</span> /dev/null
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade <span class="token parameter variable">-y</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span>  <span class="token function">install</span> qemu-kvm libvirt-clients libvirt-daemon-system bridge-utils virt-manager ovmf cpu-checker <span class="token function">vim</span> <span class="token function">expect</span> <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二-创建和挂载-xfs-文件系统" tabindex="-1"><a class="header-anchor" href="#二-创建和挂载-xfs-文件系统" aria-hidden="true">#</a> (二) 创建和挂载 XFS 文件系统</h2><p><strong>1、查看硬盘分区情况</strong></p><p><code>lsblk</code></p><p><strong>2、创建数据盘文件夹并且格式化硬盘、挂载硬盘(数据盘挂载目录务必为/data)</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">mkdir</span> /data
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> xfsprogs <span class="token parameter variable">-y</span>
<span class="token function">sudo</span> mkfs.xfs <span class="token parameter variable">-n</span> <span class="token assign-left variable">ftype</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">-f</span> /dev/sdb  （此处是否为sdb需要根据lsblk查看情况而定）
<span class="token function">sudo</span> <span class="token function">mount</span>  <span class="token parameter variable">-o</span> pquota /dev/sdb /data
<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">777</span> /data
<span class="token function">sudo</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;/dev/sdb /data     xfs pquota 0 1&quot;</span> <span class="token operator">&gt;&gt;</span> /etc/fstab
<span class="token function">sudo</span> <span class="token function">mount</span> <span class="token parameter variable">-a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三-判断机器是否支持虚拟化" tabindex="-1"><a class="header-anchor" href="#三-判断机器是否支持虚拟化" aria-hidden="true">#</a> (三) 判断机器是否支持虚拟化</h2><p><strong>1、开启硬件支持</strong></p><blockquote><p>BIOS 开启 VT-d（如果是 AMD 平台，需要开启 AMD-Vi 具体操作根据主板类型浏览器搜索即可） VT（VT-x）及 VT-d 支持，AMD 叫 AMD-Vi。需要将相关支持设置为 enable，默认开启</p><p>一般情况下路径：Processor—IIO Configuration—Intel@ VT for Directed I/O(VT-d)</p></blockquote><p><strong>2、环境依赖，检查 CPU 是否支持虚拟化以及 KVM 是否可用</strong></p><p><code>egrep -c &#39;(svm|vm)&#39; /proc/cpuinfo</code></p><blockquote><p>CPU 检测，如果显示为 0，则不支持虚拟化</p></blockquote><p><code>kvm-ok</code></p><blockquote><p>检查 kvm 是否可用</p><p>显示 INFO: /dev/kvm exists KVM acceleration can be used 表示可以进行后续操作，如果显示与其不相符，请检查 VT-d 是否正确开启</p></blockquote><p><strong>3、检查 ip_forward 转发是否开启</strong></p><blockquote><p>查看/proc/sys/net/ipv4/ip_forward 是否为 1 如果不为 1 则执行:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo sh -c &#39;echo &quot;net.ipv4.ip_forward=1&quot; &gt;&gt; /etc/sysctl.conf&#39;
sudo sysctl -p
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>查看 lsmod | grep br_netfilter 是否有输出 如果没有输出则执行：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo sh -c &#39;echo &quot;br_netfilter&quot; &gt; /etc/modules-load.d/br_netfilter.conf&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行完后需要重启，也可以与设置完显卡直通后一起重启</p></blockquote><p><strong>vfio 环境准备</strong></p><ul><li>设置黑名单，使卡不被占用</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">vim</span> /etc/modprobe.d/blacklist.conf
<span class="token comment">#最后添加内容：</span>
blacklist snd_hda_intel
blacklist amd76x_edac
blacklist vga16fb
blacklist nouveau
blacklist rivafb
blacklist nvidiafb
blacklist rivatv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>设置显卡直通</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#查询显卡ID</span>
lspci <span class="token parameter variable">-nnv</span> <span class="token operator">|</span> <span class="token function">grep</span> NVIDIA
复制显卡id，例如10de:2231  10de:1aef，重复内容仅保留一次即可

<span class="token comment">#修改内核文件</span>
<span class="token function">sudo</span> <span class="token function">vim</span> /etc/default/grub
<span class="token comment">#在GRUB_CMDLINE_LINUX_DEFAULT字段添加（如果是AMD平台，intel_iommu=on改为amd_iommu=on)</span>
quiet splash <span class="token assign-left variable">intel_iommu</span><span class="token operator">=</span>on <span class="token assign-left variable">kvm.ignore_msrs</span><span class="token operator">=</span><span class="token number">1</span> vfio-pci.ids<span class="token operator">=</span>显卡id，中间以逗号隔开
<span class="token comment">#在GRUB_CMDLINE_LINUX字段添加</span>
quiet splash <span class="token assign-left variable">intel_iommu</span><span class="token operator">=</span>on <span class="token assign-left variable">iommu</span><span class="token operator">=</span>pt <span class="token assign-left variable">rd.driver.pre</span><span class="token operator">=</span>vfio-pci


<span class="token comment">#更新内核</span>
<span class="token function">sudo</span> <span class="token function">update-grub</span>

<span class="token comment">#重启机器</span>
<span class="token function">reboot</span>
<span class="token comment">#查询显卡占用情况</span>
lspci <span class="token parameter variable">-vv</span> <span class="token parameter variable">-s</span> <span class="token operator">&lt;</span>显卡PCI接口,例如00：01.<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span> <span class="token operator">|</span> <span class="token function">grep</span> driver
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>显示 vfio-pci 即为正常，非 vfio-pci 请返回查看 grub 文件是否正确，如果无任何输出，请执行下面的手动绑定</p></blockquote><ul><li>检查内核参数：</li></ul><blockquote><p>检查<code>/proc/sys/net/bridge/bridge-nf-call-iptables</code>和<code>/proc/sys/net/bridge/bridge-nf-call-ip6tables</code>是否都=1</p></blockquote><p><strong>手动绑定 GPU（仅限上一步查询没有输出的情况，以下示例仅作演示请根据实际查询结果进行替换）</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#执行命令进行绑定(注意：echo后的内容为机器查询到的显卡id）已经被占用的PCI可不用再手动绑定</span>
<span class="token function">sudo</span> <span class="token parameter variable">-i</span>
<span class="token function">sudo</span> <span class="token builtin class-name">echo</span> 10de 1e82 <span class="token operator">&gt;</span> /sys/bus/pci/drivers/vfio-pci/new_id
<span class="token function">sudo</span> <span class="token builtin class-name">echo</span> 10de <span class="token number">2206</span> <span class="token operator">&gt;&gt;</span> /sys/bus/pci/drivers/vfio-pci/new_id
…………


<span class="token comment">#绑定完成后再次查询（每张卡的所有项都要查一下）</span>
lspci <span class="token parameter variable">-vv</span> <span class="token parameter variable">-s</span> <span class="token number">17</span>:00.0 <span class="token operator">|</span> <span class="token function">grep</span> driver
<span class="token comment">#如果出现 Kernel driver in use : vfio-pci 说明绑定成功。如果仍未成功，请返回检查</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四-确认机器显卡被-vfio-pci-占用后-启动-libvirtd-服务并设置开机自启" tabindex="-1"><a class="header-anchor" href="#四-确认机器显卡被-vfio-pci-占用后-启动-libvirtd-服务并设置开机自启" aria-hidden="true">#</a> (四) 确认机器显卡被 vfio-pci 占用后，启动 libvirtd 服务并设置开机自启</h2><div class="hint-container warning"><p class="hint-container-title">注意</p><p>这一步配置非常重要! <strong>如果没有正确配置将无法正确接收请求，会直接影响机器在链状态，影响出租，造成损失</strong></p></div><p><strong>1、开启 virt tcp 监听服务：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>修改配置文件：
<span class="token function">sudo</span> <span class="token function">vim</span> /etc/libvirt/libvirtd.conf

找到下边这2行，去掉开头的<span class="token comment">#号：</span>
<span class="token comment">#listen_tls = 0</span>
<span class="token comment">#listen_tcp = 1</span>

找到这一行，去掉开头<span class="token comment">#号，并且将sasl改为none：</span>
<span class="token comment">#auth_tcp = &quot;sasl&quot;	======&gt;	auth_tcp = &quot;none&quot;</span>

<span class="token function">sudo</span> <span class="token function">vim</span> /etc/default/libvirtd
<span class="token comment">#对应修改为如下配置（这个是小写L）</span>
<span class="token assign-left variable">libvirtd_opts</span><span class="token operator">=</span><span class="token string">&quot;-l&quot;</span>

<span class="token comment">#修改完成后请执行：</span>
systemctl mask libvirtd.socket libvirtd-ro.socket libvirtd-admin.socket libvirtd-tls.socket libvirtd-tcp.socket
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2、启动 libvirtd 并设置开机自启&amp;检查服务状态</strong></p><ul><li>sudo systemctl restart libvirtd.service</li><li>sudo systemctl enable libvirtd.service</li><li>systemctl status libvirtd</li></ul><p><strong>3、测试 libvirtd 是否启动成功</strong></p><ul><li>virsh connect qemu+tcp://localhost:16509/system</li><li>如果没有输出错误，就说明启动成功了；</li></ul><h2 id="五-安装-dbc-功能节点程序" tabindex="-1"><a class="header-anchor" href="#五-安装-dbc-功能节点程序" aria-hidden="true">#</a> (五) 安装 DBC 功能节点程序</h2><ul><li><strong>注意</strong>：需要切换到 dbc 用户安装</li></ul>`,39),r={href:"http://112.192.16.27:9000/dbc/install_update_script/mainnet/install_mining.sh",target:"_blank",rel:"noopener noreferrer"},u=n("li",null,[s("给安装脚本添加可执行权限： 命令行下执行："),n("code",null,"chmod +x ./install_mining.sh")],-1),v=n("li",null,[s("运行安装脚本： 命令行下执行："),n("code",null,"./install_mining.sh [安装目录]")],-1),m=n("p",null,"(安装过程中，需要用户输入 2 个本地监听端口号)",-1),b=n("h2",{id:"六-下载镜像模板-请放置于-data-目录下-dbc-启动虚拟机会去-data-目录搜寻",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#六-下载镜像模板-请放置于-data-目录下-dbc-启动虚拟机会去-data-目录搜寻","aria-hidden":"true"},"#"),s(" (六) 下载镜像模板（请放置于/data 目录下，dbc 启动虚拟机会去/data 目录搜寻）")],-1),f={href:"http://112.192.16.27:9000/image/",target:"_blank",rel:"noopener noreferrer"},k=i('<h2 id="七-备份机器-id-以及私钥" tabindex="-1"><a class="header-anchor" href="#七-备份机器-id-以及私钥" aria-hidden="true">#</a> (七) 备份机器 id 以及私钥</h2><div class="hint-container warning"><p class="hint-container-title">注意</p><p>非常重要，如果此私钥丢失会损失 50%的质押币，请注意多个地方备份</p></div><blockquote><p>备份安装目录下的 dat/node.dat 文件，放到安全的位置，后面如果重装系统或者重装 DBC 需要用原来的 id 和私钥，否则质押币会被扣除</p></blockquote><h2 id="八-测试创建带有显卡直通的虚拟机-用来检测前面是否正确配置" tabindex="-1"><a class="header-anchor" href="#八-测试创建带有显卡直通的虚拟机-用来检测前面是否正确配置" aria-hidden="true">#</a> (八) 测试创建带有显卡直通的虚拟机,用来检测前面是否正确配置</h2>',4),h={href:"http://112.192.16.27:9000/dbc/package/check_env",target:"_blank",rel:"noopener noreferrer"},g=n("li",null,"二进制文件，添加执行权限直接执行即可: chmod 777 chec_env ; ./check_env",-1),_=n("li",null,[s("出现绿色"),n("code",null,"check vm domain_test successful"),s("即为成功，若没有出现，请排查前面各项配置是否正确。")],-1),x=i(`<h2 id="九-检测机器的各种硬件参数指标是否正常" tabindex="-1"><a class="header-anchor" href="#九-检测机器的各种硬件参数指标是否正常" aria-hidden="true">#</a> (九) 检测机器的各种硬件参数指标是否正常</h2><ul><li><p>如果第八步检测成功，会成功创建一个虚拟机，通过 ssh 登陆进入这个虚拟机内部，其中：vm_local_ip 是虚拟机的内网 ip 地址，用户名是 dbc，pwd 后面的是登陆密码 <img width="542" alt="1629202906(1)" src="https://user-images.githubusercontent.com/32829693/129724788-d50728cd-913b-4e91-8d0b-e53a098da091.png"></p></li><li><p>然后 cd 到测试脚本目录，运行: 【pytest .】，</p><ul><li>cd /test/dbc_gpu_server_test/</li><li>sudo -i (切换到 root 用户)</li><li>pytest .</li></ul></li><li><p>测试共 18 项；</p><ul><li>10 项单元测试，测试 CPU，内存，硬盘，显卡，显存，cuda 可用性等；</li><li>7 项集成测试，测试实际各种使用情况是否正常（如 pytorch 计算 训练 推理）, 排除潜在硬件故障；</li><li>1 项 benchmark 速度测试，测试数十种 CNN 网络的训练和推理，持续约十分钟；</li><li>无红色 error 则通过，有红色 F / error 会显示报错对应测试项，可根据信息排查;</li><li>4 卡 2080ti 全测试过程约 10 分钟，若测试时间过长如超过半小时，则机器可能存在问题可以提前中止测试（不中止则需要等测试完成后才会报 error）;</li><li>测试结果中 short test summary info：如果全部是 passed，表示测试通过，只要有一项是 failed 表示测试不通过，需要排查故障；</li><li>结束后生成 result 文件夹导出性能报告;</li></ul></li><li><p>回到宿主机关闭并删除测试的虚拟机：./check_env --localip x.x.x.x （x.x.x.x 为虚拟机的内网 ip 地址，这一步不操作，会导致 dbc 程序无法启动新的虚拟机，从而无法上链验证通过）</p></li></ul><h2 id="十一-如果执行-pytest-卡住或者-nvidia-没有任何调用-请按照以下思路排查" tabindex="-1"><a class="header-anchor" href="#十一-如果执行-pytest-卡住或者-nvidia-没有任何调用-请按照以下思路排查" aria-hidden="true">#</a> (十一) 如果执行 pytest 卡住或者 nvidia 没有任何调用，请按照以下思路排查</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看是否是vfio报错  dmesg | grep vfio-pci</span>

root@HJICT:~<span class="token comment"># dmesg | grep vfio-pci</span>
<span class="token punctuation">[</span>   <span class="token number">42.583025</span><span class="token punctuation">]</span> vfio-pci 0000:01:00.0: vgaarb: changed VGA decodes: <span class="token assign-left variable">olddecodes</span><span class="token operator">=</span>io+mem,decodes<span class="token operator">=</span>io+mem:owns<span class="token operator">=</span>io+mem
<span class="token punctuation">[</span>   <span class="token number">79.128425</span><span class="token punctuation">]</span> vfio-pci 0000:01:00.0: vfio_ecap_init: hiding ecap 0x1e@0x258
<span class="token punctuation">[</span>   <span class="token number">79.128446</span><span class="token punctuation">]</span> vfio-pci 0000:01:00.0: vfio_ecap_init: hiding ecap 0x19@0x900
<span class="token punctuation">[</span>   <span class="token number">79.128454</span><span class="token punctuation">]</span> vfio-pci 0000:01:00.0: vfio_ecap_init: hiding ecap 0x26@0xc1c
<span class="token punctuation">[</span>   <span class="token number">79.128457</span><span class="token punctuation">]</span> vfio-pci 0000:01:00.0: vfio_ecap_init: hiding ecap 0x27@0xd00
<span class="token punctuation">[</span>   <span class="token number">79.128461</span><span class="token punctuation">]</span> vfio-pci 0000:01:00.0: vfio_ecap_init: hiding ecap 0x25@0xe00
<span class="token punctuation">[</span>   <span class="token number">79.129879</span><span class="token punctuation">]</span> vfio-pci 0000:01:00.0: BAR <span class="token number">1</span>: can<span class="token string">&#39;t reserve [mem 0x90000000-0x9fffffff 64bit pref]
[   79.148593] vfio-pci 0000:01:00.1: vfio_ecap_init: hiding ecap 0x25@0x160
[  183.031546] vfio-pci 0000:01:00.0: BAR 1: can&#39;</span>t reserve <span class="token punctuation">[</span>mem 0x90000000-0x9fffffff 64bit pref<span class="token punctuation">]</span>
<span class="token punctuation">[</span>  <span class="token number">183.031575</span><span class="token punctuation">]</span> vfio-pci 0000:01:00.0: BAR <span class="token number">1</span>: can<span class="token string">&#39;t reserve [mem 0x90000000-0x9fffffff 64bit pref]
[  183.049344] vfio-pci 0000:01:00.0: BAR 1: can&#39;</span>t reserve <span class="token punctuation">[</span>mem 0x90000000-0x9fffffff 64bit pref<span class="token punctuation">]</span>
<span class="token punctuation">[</span>  <span class="token number">183.049375</span><span class="token punctuation">]</span> vfio-pci 0000:01:00.0: BAR <span class="token number">1</span>: can&#39;t reserve <span class="token punctuation">[</span>mem 0x90000000-0x9fffffff 64bit pref<span class="token punctuation">]</span>

<span class="token comment"># vfio-pci 有一个明显的错误，进一步查看</span>

root@HJICT:~<span class="token comment"># cat /proc/iomem</span>
00000000-00000fff <span class="token builtin class-name">:</span> Reserved
00001000-0009d3ff <span class="token builtin class-name">:</span> System RAM
0009d400-0009ffff <span class="token builtin class-name">:</span> Reserved
000a0000-000bffff <span class="token builtin class-name">:</span> PCI Bus 0000:00
000c0000-000cf3ff <span class="token builtin class-name">:</span> Video ROM
000e0000-000fffff <span class="token builtin class-name">:</span> Reserved
  000f0000-000fffff <span class="token builtin class-name">:</span> System ROM
00100000-8ceacfff <span class="token builtin class-name">:</span> System RAM
8cead000-8e718fff <span class="token builtin class-name">:</span> Reserved
8e719000-8e895fff <span class="token builtin class-name">:</span> System RAM
8e896000-8ec98fff <span class="token builtin class-name">:</span> ACPI Non-volatile Storage
8ec99000-8f40efff <span class="token builtin class-name">:</span> Reserved
8f40f000-8f40ffff <span class="token builtin class-name">:</span> System RAM
8f410000-8fffffff <span class="token builtin class-name">:</span> Reserved
<span class="token number">90000000</span>-dfffffff <span class="token builtin class-name">:</span> PCI Bus 0000:00
  <span class="token number">90000000</span>-a1ffffff <span class="token builtin class-name">:</span> PCI Bus 0000:01
    <span class="token number">90000000</span>-9fffffff <span class="token builtin class-name">:</span> 0000:01:00.0
      <span class="token number">90000000</span>-9fffffff <span class="token builtin class-name">:</span> vesafb
    a0000000-a1ffffff <span class="token builtin class-name">:</span> 0000:01:00.0
      a0000000-a1ffffff <span class="token builtin class-name">:</span> vfio-pci
  a2000000-a30fffff <span class="token builtin class-name">:</span> PCI Bus 0000:01
    a2000000-a2ffffff <span class="token builtin class-name">:</span> 0000:01:00.0
      a2000000-a2ffffff <span class="token builtin class-name">:</span> vfio-pci
    a3080000-a3083fff <span class="token builtin class-name">:</span> 0000:01:00.1
      a3080000-a3083fff <span class="token builtin class-name">:</span> vfio-pci
  a3100000-a31fffff <span class="token builtin class-name">:</span> 0000:00:1f.3
  a3200000-a32fffff <span class="token builtin class-name">:</span> PCI Bus 0000:02
    a3200000-a32001ff <span class="token builtin class-name">:</span> 0000:02:00.0
      a3200000-a32001ff <span class="token builtin class-name">:</span> ahci



<span class="token comment">#  上面可以看到，90000000-9fffffff  被vesafb占用，并非vfio-pci</span>

<span class="token comment"># 修改/etc/default/grub，关闭vga，</span>
<span class="token assign-left variable">GRUB_CMDLINE_LINUX_DEFAULT</span><span class="token operator">=</span><span class="token string">&quot;quiet splash intel_iommu=on iommu=pt pcie_acs_override=multifunction nofb video=vesafb:off video=efifb:off vga=off&quot;</span>
<span class="token assign-left variable">GRUB_CMDLINE_LINUX</span><span class="token operator">=</span><span class="token string">&quot;quiet splash intel_iommu=on iommu=pt rd.driver.pre=vfio-pci&quot;</span>


更新并重启
update-initramfs <span class="token parameter variable">-u</span> <span class="token parameter variable">-k</span> all
<span class="token function">update-grub</span>
<span class="token function">reboot</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十二-查看机器是否正确加入到算力网络" tabindex="-1"><a class="header-anchor" href="#十二-查看机器是否正确加入到算力网络" aria-hidden="true">#</a> (十二) 查看机器是否正确加入到算力网络</h2>`,5),q={href:"https://deepbrainchain.github.io/DBC-Wiki/install-update-dbc-node/install-update-dbc/install-update-dbc-client.html",target:"_blank",rel:"noopener noreferrer"},C={href:"https://deepbrainchain.github.io/DBC-Wiki/install-update-dbc-node/dbc-client-api/http-api.html",target:"_blank",rel:"noopener noreferrer"},y=n("li",null,"关于客户端节点：建议每家矿池搭建 2 个及以上客户端节点，保证在官方提供节点或者其他矿池提供节点掉线情况下依旧可以保证网络正常，如果网络中客户端节点过少或者挂掉过多，会影响机器出租情况。客户端节点搭建可以在其他服务器启动一个容器来部署，并不会占用太多资源。",-1),I=n("li",null,[n("strong",null,[n("em",null,"客户端节点可以与算力节点部署在同一台机器，注意每个节点的 conf/core.conf 配置文件中的端口号不要重复")])],-1),B=n("h2",{id:"十三-机器上链",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#十三-机器上链","aria-hidden":"true"},"#"),s(" (十三) 机器上链")],-1),D={href:"https://deepbrainchain.github.io/DBC-Wiki/onchain-guide/bonding-machine.html",target:"_blank",rel:"noopener noreferrer"},R=n("h2",{id:"十四-设置监控服务",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#十四-设置监控服务","aria-hidden":"true"},"#"),s(" (十四) 设置监控服务")],-1),A=n("li",null,'设置 DBC 的监控服务器地址：在 conf/core.conf 中添加配置"dbc_monitor_server=ip:port"',-1),V=n("li",null,'设置矿工的监控服务器地址：在 conf/core.conf 中添加配置"miner_monitor_server=ip:port"',-1),M={href:"https://deepbrainchain.github.io/DBC-Wiki/install-update-dbc-node/dbc-monitor/http-monitor-api.html",target:"_blank",rel:"noopener noreferrer"};function N(w,U){const a=o("ExternalLinkIcon");return t(),c("div",null,[d,n("ol",null,[n("li",null,[s("下载 dbc 功能节点的安装脚本： "),n("a",r,[s("http://112.192.16.27:9000/dbc/install_update_script/mainnet/install_mining.sh"),e(a)])]),u,v]),m,b,n("p",null,[n("a",f,[s("http://112.192.16.27:9000/image/"),e(a)]),s(" 下载：ubuntu.qcow2 和 windows_1909.qcow2 镜像")]),k,n("ul",null,[n("li",null,[s("测试程序下载地址："),n("a",h,[s("http://112.192.16.27:9000/dbc/package/check_env"),e(a)])]),g,_]),x,n("ul",null,[n("li",null,[s("矿池搭建客户端节点 请参考 "),n("a",q,[s("install_update_dbc_client_cn.md"),e(a)])]),n("li",null,[s("1 分钟后，通过客户端请求机器信息，如果能够查到机器信息，说明机器已加入到网络中 请求机器信息，请参考："),n("a",C,[s("dbc_client_http_api"),e(a)])]),y,I]),B,n("p",null,[n("a",D,[s("https://deepbrainchain.github.io/DBC-Wiki/onchain-guide/bonding-machine.html"),e(a)])]),R,n("ul",null,[A,V,n("li",null,[s("设置租用人的监控服务器地址："),n("a",M,[s("https://deepbrainchain.github.io/DBC-Wiki/install-update-dbc-node/dbc-monitor/http-monitor-api.html"),e(a)])])])])}const P=l(p,[["render",N],["__file","install-dbc-compute-node.html.vue"]]);export{P as default};
