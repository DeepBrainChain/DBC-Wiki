import{_ as s,H as d,W as r,X as l,a0 as t,Y as i,Z as a,$ as o}from"./framework-2c7d842c.js";const c="/DBC-Wiki/assets/image-20210601164137286-28f00c07.png",p="/DBC-Wiki/assets/image-20240418180654901-d2d493e3.png",g="/DBC-Wiki/assets/image-20210601164631426-d6362ae6.png",m="/DBC-Wiki/assets/133870420-b790637c-cab6-44f9-ba00-493eadc951cd-1f0bf23a.png",h="/DBC-Wiki/assets/apifox-9c0c68ff.jpg",f="/DBC-Wiki/assets/133870889-61976abb-ae6b-4cd6-97e3-9e9205745346-fea29f07.png",u="/DBC-Wiki/assets/133870573-04dbcb84-9112-4837-b8e4-20db8538c079-b5aa0eb1.png",b="/DBC-Wiki/assets/133871452-06dde25a-9691-44dc-b35b-124dbece44fd-f5317cc4.png",_="/DBC-Wiki/assets/test_create-1646e9b6.png",x="/DBC-Wiki/assets/task_info-88087016.png",v="/DBC-Wiki/assets/nvidia-232e54d9.png",k="/DBC-Wiki/assets/delete-68c9063e.png",C="/DBC-Wiki/assets/image-20240418182108544-2658d613.png",D="/DBC-Wiki/assets/image-20240418183059812-232cedfe.png",B="/DBC-Wiki/assets/image-20240418183216059-5267175e.png",y="/DBC-Wiki/assets/image-20211020112744070-55c8dbcd.png",W="/DBC-Wiki/assets/image-20211020112948942-2ffee279.png",z="/DBC-Wiki/assets/image-20211020113330231-00028611.png",w={},I={href:"http://114.116.21.175:22244/dbc-develop-0.3.7.5.postman_collection.json",target:"_blank",rel:"noopener noreferrer"},O={href:"https://46fqx9l1bt.apifox.cn",target:"_blank",rel:"noopener noreferrer"},q={href:"https://www.deeplink.cloud",target:"_blank",rel:"noopener noreferrer"};function P(A,e){const n=d("ExternalLinkIcon");return r(),l("div",null,[e[11]||(e[11]=t('<h1 id="委员会处理机器上链请求" tabindex="-1"><a class="header-anchor" href="#委员会处理机器上链请求" aria-hidden="true">#</a> 委员会处理机器上链请求</h1><h2 id="_1-查看系统分配给自己的订单" tabindex="-1"><a class="header-anchor" href="#_1-查看系统分配给自己的订单" aria-hidden="true">#</a> 1. 查看系统分配给自己的订单</h2><ul><li>导航到 <code>开发者</code>--&gt;<code>链状态</code>--&gt;<code>存储</code>，在其中选择<code>onlineCommittee</code>模块的<code>committeeMachine</code>存储，点击右侧的<code>+</code>号，可以看到委员会的订单情况。如图所示，该委员会有一个系统分配的订单</li></ul><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>导航到 <code>开发者</code>--&gt;<code>链状态</code>--&gt;<code>存储</code>，在其中选择<code>terminatingRental</code>模块的<code>committeeMachine</code>存储，点击右侧的<code>+</code>号，可以看到委员会的订单情况。如图所示，该委员会有一个系统分配的订单</p><figure><img src="'+p+'" alt="image-20240418180654901" tabindex="0" loading="lazy"><figcaption>image-20240418180654901</figcaption></figure></li></ul><h2 id="_2-查看系统分配给该委员会进行验证的时间区间" tabindex="-1"><a class="header-anchor" href="#_2-查看系统分配给该委员会进行验证的时间区间" aria-hidden="true">#</a> 2. 查看系统分配给该委员会进行验证的时间区间</h2><ul><li>导航到 <code>开发者</code>--<code>链存储</code>--<code>存储</code>，选择<code>onlineCommittee</code>的<code>committeeOps</code>方法，并输入自己的委员会帐号，与上一步委派的机器 ID，可以查询到类似下面的信息：</li></ul><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>短租模式导航到 <code>开发者</code>--<code>链存储</code>--<code>存储</code>，选择<code>terminatingRental</code>的<code>committeeOlineOps</code>方法，并输入自己的委员会帐号，与上面类似</li></ul><p>其中，booked_time 表示派单时间，注意，派单之后的 36~48 小时(也就是区块高度 booked_time + 4320 ~ booked_time + 5760)之间，委员会提交原始信息。</p><p><code>verify_time</code> 表示系统分派的，委员会验证机器信息的开始时间。如图，该委员会被分派了 9 次机会来验证机器，每次持续时间为 4 个小时，也就是 480 个块高。此时，委员会可以挑选自己方便的时间，通过前端查询该机器的登录信息，登录到系统中验证机器。</p><h2 id="_3-查询机器信息-onlineprofile以这个方式为主-如果遇到返回失败-可以切换到裸金属模式进行查询" tabindex="-1"><a class="header-anchor" href="#_3-查询机器信息-onlineprofile以这个方式为主-如果遇到返回失败-可以切换到裸金属模式进行查询" aria-hidden="true">#</a> 3. 查询机器信息（OnlineProfile以这个方式为主，如果遇到返回失败，可以切换到裸金属模式进行查询）</h2><h3 id="_3-1-使用-postman" tabindex="-1"><a class="header-anchor" href="#_3-1-使用-postman" aria-hidden="true">#</a> 3.1 使用 Postman</h3><p>下载安装 postman，具体下载请去官网根据操作系统安装。</p>',14)),i("p",null,[e[1]||(e[1]=a("下载 json 文件：")),i("a",I,[e[0]||(e[0]=a("http://114.116.21.175:22244/dbc-develop-0.3.7.5.postman_collection.json")),o(n)])]),e[12]||(e[12]=i("p",null,"导入 json 文件：fiel----import----选择 json 文件导入 import",-1)),e[13]||(e[13]=i("figure",null,[i("img",{src:m,alt:"",tabindex:"0",loading:"lazy"}),i("figcaption")],-1)),e[14]||(e[14]=i("p",null,[a("将客户端 ip 地址以及端口更换为 "),i("code",null,"121.57.95.175:5679")],-1)),e[15]||(e[15]=i("h3",{id:"_3-2-使用apifox",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#_3-2-使用apifox","aria-hidden":"true"},"#"),a(" 3.2 使用APIFOX")],-1)),i("ul",null,[i("li",null,[i("p",null,[e[3]||(e[3]=a("网页链接：")),i("a",O,[e[2]||(e[2]=a("https://46fqx9l1bt.apifox.cn")),o(n)]),e[4]||(e[4]=a("， 如果遇到失效的情况，可以与我们联系。"))])]),e[5]||(e[5]=i("li",null,[i("p",null,"APP 使用： 在API Hub内搜索DeepBrainChain收藏即可"),i("figure",null,[i("img",{src:h,alt:"",tabindex:"0",loading:"lazy"}),i("figcaption")])],-1))]),e[16]||(e[16]=t(`<h3 id="_3-3-查看宿主机详细信息" tabindex="-1"><a class="header-anchor" href="#_3-3-查看宿主机详细信息" aria-hidden="true">#</a> 3.3 查看宿主机详细信息：</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>签名工具下载地址：https://github.com/DeepBrainChain/DBC-AIComputingNet/releases/download/0.3.7.3/sign_tool

<span class="token comment"># 安装依赖 libvirt：</span>
<span class="token comment">## Ubuntu</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libvirt
<span class="token comment">## Arch</span>
yay <span class="token parameter variable">-S</span> libvirt

<span class="token comment"># 添加执行权限：</span>
<span class="token function">chmod</span> +x sign_tool
 <span class="token comment"># 然后签名执行：</span>
./sign_tool 钱包地址 钱包私钥
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在下图中替换：sign、nonce、wallet （注意：同一个机器 sign、nonce 只能使用一次），可以查询到机器信息</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>查看机器 GPU 信息</p><h3 id="_3-4-创建虚拟机机器" tabindex="-1"><a class="header-anchor" href="#_3-4-创建虚拟机机器" aria-hidden="true">#</a> 3.4 创建虚拟机机器</h3><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>创建过程比较慢，大约在五分钟到十五分钟之间，在 postman 的查看 task 详细信息查看虚拟机登录信息及虚拟机状态，如返回的结果中&quot;status&quot;: &quot;creating&quot;表示虚拟机正在创建，此时等待即可</p><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-5-进入创建的虚拟机执行nvidia-smi-l查看显卡类型" tabindex="-1"><a class="header-anchor" href="#_3-5-进入创建的虚拟机执行nvidia-smi-l查看显卡类型" aria-hidden="true">#</a> 3.5 进入创建的虚拟机执行<code>nvidia-smi -L</code>查看显卡类型</h3><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>查询完成后将虚拟机删除，出现 OK 说明删除成功</p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_4-查询机器信息-terminatingrental-模块下以这个方式查询为主-主要涉及裸金属模式-apifox当中有针对裸金属模式的接口" tabindex="-1"><a class="header-anchor" href="#_4-查询机器信息-terminatingrental-模块下以这个方式查询为主-主要涉及裸金属模式-apifox当中有针对裸金属模式的接口" aria-hidden="true">#</a> 4. 查询机器信息（terminatingRental 模块下以这个方式查询为主，主要涉及裸金属模式，APIfox当中有针对裸金属模式的接口）</h2><figure><img src="'+C+'" alt="image-20240418182108544" tabindex="0" loading="lazy"><figcaption>image-20240418182108544</figcaption></figure>',17)),i("ul",null,[e[9]||(e[9]=i("li",null,[i("p",null,[a("验证人使用查询指定裸金属服务器接口，选择正式环境输入设备ID进行查询，返回的结果主要关注"),i("code",null,"power_satus、deeplink_device_id、deeplink_device_password"),a(",当power显示off时，需要调用开机接口。")])],-1)),i("li",null,[i("p",null,[e[7]||(e[7]=a("这时候获取设备的详细信息，需要验证人使用deeplink连接到我们查询到的这个deeplink ID设备上进行获取。 deeplink下载地址： ")),i("a",q,[e[6]||(e[6]=a("https://www.deeplink.cloud")),o(n)]),e[8]||(e[8]=a(" 。"))])]),e[10]||(e[10]=i("li",null,[i("p",null,"如果可以正常登录，则收集相关信息并生成哈希进行提交，如果无法正常获取，则可以拒绝。")],-1))]),e[17]||(e[17]=t(`<h2 id="_5-委员会计算获得机器信息的-hash" tabindex="-1"><a class="header-anchor" href="#_5-委员会计算获得机器信息的-hash" aria-hidden="true">#</a> 5. 委员会计算获得机器信息的 hash</h2><p>我们已经提供了脚本来计算需要填写的信息的 Hash：</p><p><code>https://github.com/DeepBrainChain/DeepBrainChain-MainChain/blob/master/scripts/hash_machine_info.py</code></p><p>当获取到要求的信息后，修改该脚本，并执行，得到 hash 值。<strong>请保存好所填写的信息，直到该机器上线成功，或者上线失败</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python3 hash_machine_info.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_6-委员会提交机器信息的-hash" tabindex="-1"><a class="header-anchor" href="#_6-委员会提交机器信息的-hash" aria-hidden="true">#</a> 6. 委员会提交机器信息的 Hash</h2><p>如图，在 36 小时之前提交机器信息的 Hash(提交的时候要注意 0x 一定不能去掉)</p><p>注意：如果是在terminatingRental中的机器，则要去terminatingRental 提交submitConfirmHash</p><figure><img src="`+D+'" alt="image-20240418183059812" tabindex="0" loading="lazy"><figcaption>image-20240418183059812</figcaption></figure><h2 id="_7-委员会提交机器的原始信息" tabindex="-1"><a class="header-anchor" href="#_7-委员会提交机器的原始信息" aria-hidden="true">#</a> 7. 委员会提交机器的原始信息</h2><p><strong>请确保提交机器原始信息时，在派单之后的 36~48 小时之间！</strong></p><figure><img src="'+B+'" alt="image-20240418183216059" tabindex="0" loading="lazy"><figcaption>image-20240418183216059</figcaption></figure><h2 id="_8-委员会奖励的查询与领取" tabindex="-1"><a class="header-anchor" href="#_8-委员会奖励的查询与领取" aria-hidden="true">#</a> 8. 委员会奖励的查询与领取</h2><h3 id="_8-1-查询奖励" tabindex="-1"><a class="header-anchor" href="#_8-1-查询奖励" aria-hidden="true">#</a> 8.1 查询奖励</h3><p>导航到 开发者--链状态--存储，查询委员会帐号对应的奖励（committee 模块的 committeeStake 方法）。如图，其中<code>can_claim_reward</code>为可领取的奖励；<code>claimed_reward</code>为已经领取的奖励。</p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_8-2-领取奖励" tabindex="-1"><a class="header-anchor" href="#_8-2-领取奖励" aria-hidden="true">#</a> 8.2 领取奖励</h3><p>导航到 开发者--交易，选择委员会帐号，选择 <code>committee</code> 模块的 <code>claimReward</code> 方法，提交交易即可。</p><figure><img src="'+W+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_9-其他操作" tabindex="-1"><a class="header-anchor" href="#_9-其他操作" aria-hidden="true">#</a> 9. 其他操作</h2><h3 id="_9-1-委员会添加质押" tabindex="-1"><a class="header-anchor" href="#_9-1-委员会添加质押" aria-hidden="true">#</a> 9.1 委员会添加质押</h3><p>可以调用 <code>committee</code> --&gt; <code>committeeAddStake</code> 方法。当(质押数量-已使用的质押) &gt; 质押数量*40%时，委员会状态为&quot;可派单的&quot;</p><h3 id="_9-2-委员会减少质押" tabindex="-1"><a class="header-anchor" href="#_9-2-委员会减少质押" aria-hidden="true">#</a> 9.2 委员会减少质押</h3><p>调用 <code>committee</code> --&gt; <code>committeeReduceStake</code>方法。注意，最小质押当前为 2 万 DBC，减少后如果小于最小质押，将会无法减少质押。</p><h3 id="_9-3-查询惩罚-todo" tabindex="-1"><a class="header-anchor" href="#_9-3-查询惩罚-todo" aria-hidden="true">#</a> 9.3 查询惩罚(TODO)</h3><p>委员会可以通过 开发者--链状态--选择 committee 模块的 pendingSlash 方法来查询奖励。其中，SlashId 为自增的，可以不包含该值，查询所有还没执行的惩罚。</p><p>如下图，可以查看惩罚金额(slash_amount)，原因(slash_reason)，惩罚执行时间(slash_exec_time)，惩罚产生时间(slash_time)等信息。</p><figure><img src="'+z+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_9-4-惩罚申诉-todo" tabindex="-1"><a class="header-anchor" href="#_9-4-惩罚申诉-todo" aria-hidden="true">#</a> 9.4 惩罚申诉(TODO)</h3>',29))])}const S=s(w,[["render",P],["__file","machine-verification.html.vue"]]);export{S as default};
