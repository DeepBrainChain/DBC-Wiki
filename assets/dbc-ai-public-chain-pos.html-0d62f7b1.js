import{_ as r,a as c,b as p,c as d,d as u,e as b,f as m,g as h,h as v,i as g}from"./image-20210329095613442-416d6ef3.js";import{_ as k,H as l,W as f,X as _,a0 as e,Y as n,Z as s,$ as i,a1 as x}from"./framework-2c7d842c.js";const y={},C={href:"https://www.dbcwallet.io/?rpc=wss://info1.dbcwallet.io#/accounts",target:"_blank",rel:"noopener noreferrer"},q={href:"https://telemetry.polkadot.io/#list/0x03aa6b475a03f8baf7f83e448513b00eaab03aefa4ed64bd1d31160dce028add",target:"_blank",rel:"noopener noreferrer"};function w(B,a){const o=l("RouterLink"),t=l("ExternalLinkIcon");return f(),_("div",null,[a[9]||(a[9]=e('<h1 id="成为dbc-ai-公链验证节点" tabindex="-1"><a class="header-anchor" href="#成为dbc-ai-公链验证节点" aria-hidden="true">#</a> 成为DBC AI 公链验证节点</h1><h2 id="_0-机器配置" tabindex="-1"><a class="header-anchor" href="#_0-机器配置" aria-hidden="true">#</a> 0. 机器配置</h2><ul><li>内存：8G</li><li>CPU：2 核</li><li>硬盘：300G+ (推荐500G）</li><li>系统： Ubuntu20.04及以上版本（推荐22.04）</li></ul><h2 id="_1-生成资金账户-已有资金账户可以略过" tabindex="-1"><a class="header-anchor" href="#_1-生成资金账户-已有资金账户可以略过" aria-hidden="true">#</a> 1. 生成资金账户（已有资金账户可以略过）</h2>',4)),n("p",null,[a[1]||(a[1]=s("参考： ")),i(o,{to:"/staking-model/generate-new-account.html"},{default:x(()=>a[0]||(a[0]=[s("如何生成账户")])),_:1})]),a[10]||(a[10]=e(`<h2 id="_2-获取-dbc-chain-二进制" tabindex="-1"><a class="header-anchor" href="#_2-获取-dbc-chain-二进制" aria-hidden="true">#</a> 2. 获取 dbc-chain 二进制</h2><h3 id="方式-1-使用预编译版本" tabindex="-1"><a class="header-anchor" href="#方式-1-使用预编译版本" aria-hidden="true">#</a> 方式 1: 使用预编译版本</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">mkdir</span> dbc-chain-mainnet <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> dbc-chain-mainnet

<span class="token function">wget</span> https://github.com/DeepBrainChain/DeepBrainChain-MainChain/releases/download/v4.0/dbc-chain-4.0.0.tar.gz <span class="token parameter variable">-O</span> dbc_chain_linux_x64.tar.gz

<span class="token function">tar</span> xf dbc_chain_linux_x64.tar.gz 

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方式-2-从源码进行编译" tabindex="-1"><a class="header-anchor" href="#方式-2-从源码进行编译" aria-hidden="true">#</a> 方式 2：从源码进行编译</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装依赖</span>
<span class="token function">curl</span> https://getsubstrate.io <span class="token parameter variable">-sSf</span> <span class="token operator">|</span> <span class="token function">bash</span> <span class="token parameter variable">-s</span> -- <span class="token parameter variable">--fast</span>
<span class="token builtin class-name">source</span> ~/.cargo/env

<span class="token comment"># 编译dbc-chain</span>
<span class="token function">git</span> clone https://github.com/DeepBrainChain/DeepBrainChain-MainChain.git
<span class="token builtin class-name">cd</span> DeepBrainChain-MainChain
<span class="token function">cargo</span> build <span class="token parameter variable">--release</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-运行同步节点" tabindex="-1"><a class="header-anchor" href="#_3-运行同步节点" aria-hidden="true">#</a> 3. 运行同步节点</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">nohup</span> ./target/release/dbc-chain --base-path ./db_data <span class="token parameter variable">--chain</span><span class="token operator">=</span>mainnet <span class="token parameter variable">--port</span> <span class="token number">30333</span> --rpc-port <span class="token number">9983</span> <span class="token parameter variable">--pruning</span><span class="token operator">=</span>archive <span class="token parameter variable">--name</span> dbc-chain --rpc-cors<span class="token operator">=</span>all --rpc-methods<span class="token operator">=</span>unsafe --rpc-external  <span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>dbc_node.log <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>如果你是从源码进行编译，可执行文件路径为：<code>./target/release/dbc-chain</code></p></li><li><p>同步完成后，<code>Control + C</code>关掉程序。你可以根据<code>target</code>与<code>best</code>的比较来判断是否同步已经完成。当 target 与 best 相差不大（如 100 以内）时，可以认为已经完成同步。</p></li></ul><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><strong>参数说明：</strong><ul><li><code>--base-path</code>：指定该区块链存储数据的目录。如果不指定，将使用默认路径。如果目录不存在，将会为你自动创建。如果该目录已经有了区块链数据，将会报错，这时应该选择不同的目录或清除该目录内容</li><li><code>--pruning=archive</code>：以归档的方式启动区块链</li></ul></li></ul><h2 id="_4-以验证人的方式运行节点" tabindex="-1"><a class="header-anchor" href="#_4-以验证人的方式运行节点" aria-hidden="true">#</a> 4. 以验证人的方式运行节点</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#启动节点</span>
<span class="token function">nohup</span> ./target/release/dbc-chain --base-path ./db_data <span class="token parameter variable">--chain</span><span class="token operator">=</span>mainnet <span class="token parameter variable">--port</span> <span class="token number">30333</span> --rpc-port <span class="token number">9983</span> <span class="token parameter variable">--validator</span> <span class="token parameter variable">--pruning</span><span class="token operator">=</span>archive <span class="token parameter variable">--name</span> YourNodeName --rpc-cors<span class="token operator">=</span>all --rpc-methods<span class="token operator">=</span>unsafe --rpc-external  <span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>dbc_node.log <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>

<span class="token comment">#如果遇到启动报错</span>
./dbc-chain: /lib/x86_64-linux-gnu/libstdc++.so.6: version <span class="token variable"><span class="token variable">\`</span>GLIBCXX_3.4.30&#39; not found <span class="token punctuation">(</span>required by ./dbc-chain<span class="token punctuation">)</span>
./dbc-chain: /lib/x86_64-linux-gnu/libstdc++.so.6: version <span class="token variable">\`</span></span>GLIBCXX_3.4.29<span class="token string">&#39; not found (required by ./dbc-chain)
./dbc-chain: /lib/x86_64-linux-gnu/libc.so.6: version \`GLIBC_2.32&#39;</span> not found <span class="token punctuation">(</span>required by ./dbc-chain<span class="token punctuation">)</span>
./dbc-chain: /lib/x86_64-linux-gnu/libc.so.6: version <span class="token variable"><span class="token variable">\`</span>GLIBC_2.34&#39; not found <span class="token punctuation">(</span>required by ./dbc-chain<span class="token punctuation">)</span>
./dbc-chain: /lib/x86_64-linux-gnu/libc.so.6: version <span class="token variable">\`</span></span>GLIBC_2.33&#39; not found <span class="token punctuation">(</span>required by ./dbc-chain<span class="token punctuation">)</span>

<span class="token comment">#解决方案：</span>
<span class="token comment">#1.中国地区的设备：</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;deb http://mirrors.aliyun.com/ubuntu/ jammy main&quot;</span> <span class="token operator">&gt;&gt;</span> /etc/apt/sources.list
<span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libc6 libstdc++6 <span class="token parameter variable">-y</span>
<span class="token comment">#2. 非中国地区设备：</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;deb http://archive.ubuntu.com/ubuntu/ jammy main&quot;</span> <span class="token operator">&gt;&gt;</span> /etc/apt/sources.list
<span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libc6 libstdc++6 <span class="token parameter variable">-y</span>
- 如果你是从源码进行编译，可执行文件路径为：<span class="token variable"><span class="token variable">\`</span>./target/release/dbc-chain<span class="token variable">\`</span></span>

- 注意，这里 **<span class="token variable"><span class="token variable">\`</span><span class="token parameter variable">--name</span> YourNodeName<span class="token variable">\`</span></span> 是设置你的节点名称**，你可以为你的节点起一个独一无二容易辨认的名称，别人将能在网络上看到它。
 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-生成rotatekey" tabindex="-1"><a class="header-anchor" href="#_5-生成rotatekey" aria-hidden="true">#</a> 5. 生成<code>rotateKey</code></h2><p>在运行验证人节点命令的机器上运行下面命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type: application/json&quot;</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;{&quot;id&quot;:1, &quot;jsonrpc&quot;:&quot;2.0&quot;, &quot;method&quot;: &quot;author_rotateKeys&quot;, &quot;params&quot;:[]}&#39;</span> http://localhost:9983
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_6-设置绑定-bond-金额" tabindex="-1"><a class="header-anchor" href="#_6-设置绑定-bond-金额" aria-hidden="true">#</a> 6. 设置绑定（bond）金额</h2>`,16)),n("ul",null,[n("li",null,[n("p",null,[a[3]||(a[3]=s("打开")),n("a",C,[a[2]||(a[2]=s("https://www.dbcwallet.io/?rpc=wss://info1.dbcwallet.io#/accounts")),i(t)]),a[4]||(a[4]=s(" 你将能看到你的余额："))])]),a[5]||(a[5]=n("li",null,[n("p",null,[s("导航到"),n("code",null,"网络"),s(" >"),n("code",null,"质押"),s(" > "),n("code",null,"账户操作"),s(" > "),n("code",null,"存储账户"),s("，")])],-1))]),a[11]||(a[11]=e('<figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>设置 bond 的金额（确保除了 bond 的数额，您的账户中还有余额以用来发送交易）：</li></ul><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>说明：</strong></p><ul><li><p><code>Stash account</code>：你的资金账户，这里我们 bond 45 DBC，确保账户中余额至少有这么多</p></li><li><p><code>controller account</code>：这个账户也应该有少量的 DBC 来发送开始和停止验证人的交易</p></li><li><p><code>value bonded</code>：你想要 bond/stake 多少 DBC, 请注意，你不需要 bond 账户中所有的余额，另外你随后可以增加 bond 的数额。</p></li><li><p><code>payment destination</code>：验证人获得的奖励将会被发给这个账户。这个账户可以设置成任何账户。其中，</p></li><li><p><code>Stash account(increase the amount at stake)</code>: 收益发放到 stash 账户，并质押</p></li><li><p><code>Stash account(do not increase the amount at stake)</code>：收益发放到 stash 账户，不进行质押</p></li></ul><h2 id="_7-设置rotatekey" tabindex="-1"><a class="header-anchor" href="#_7-设置rotatekey" aria-hidden="true">#</a> 7. 设置<code>rotateKey</code></h2><ul><li>在执行了 bond 之后，您将能够在 Polkadot 上看到<code>Session Key</code>的按钮：</li></ul><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>点击它，并将步骤 5 生成的<code>rotateKeys</code>填入。</li></ul><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',10)),n("ul",null,[n("li",null,[a[7]||(a[7]=s("现在，你可以到 ")),n("a",q,[a[6]||(a[6]=s("Telemetry")),i(t)]),a[8]||(a[8]=s("看到你的节点了！"))])]),a[12]||(a[12]=e('<figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_8-设置参加验证人选举" tabindex="-1"><a class="header-anchor" href="#_8-设置参加验证人选举" aria-hidden="true">#</a> 8. 设置参加验证人选举</h2><ul><li>完成了上述步骤后，你将能看到<code>Validate</code>的按钮。点击<code>Validate</code> 按钮，</li></ul><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>这时你将需要设置验证人偏好：</li></ul><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>在 <code>reward commission percentage</code>栏目中，你将需要输入你作为验证人的收益偏好。然后点击右下角<code>Validate</code>，并发送交易。在<code>Waiting</code>界面，你将能看到你的账户正在等待下个<code>Era</code>，来参加选举成为验证人节点。</li></ul><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_9-领取节点奖励" tabindex="-1"><a class="header-anchor" href="#_9-领取节点奖励" aria-hidden="true">#</a> 9. 领取节点奖励</h2><p>在浏览器插件 polkadot 中登陆你的 stash 账户，在 <code>质押 &gt; 支付 &gt; 最大84 eras</code> 中，你将能看到所有待领取的奖励：</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>点击右侧的<code>支付所有</code>，发送交易即可。</p>',12))])}const L=k(y,[["render",w],["__file","dbc-ai-public-chain-pos.html.vue"]]);export{L as default};
