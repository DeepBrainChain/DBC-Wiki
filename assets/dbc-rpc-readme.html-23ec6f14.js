import{_ as p,H as r,W as i,X as l,a0 as o,Y as s,Z as a,$ as t}from"./framework-cd0f4961.js";const d="/DBC-Wiki/assets/image-20211020111401731-52d0d6e3.png",c="/DBC-Wiki/assets/image-20210813113734192-75462bbb.png",u={},b={href:"https://github.com/DeepBrainChain/DeepBrainChain-MainChain",target:"_blank",rel:"noopener noreferrer"},m={href:"https://blog.postman.com/postman-supports-websocket-apis/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://polkadot.js.org/docs/substrate/rpc/%EF%BC%9B",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.dbcwallet.io/",target:"_blank",rel:"noopener noreferrer"};function h(g,n){const e=r("ExternalLinkIcon");return i(),l("div",null,[n[23]||(n[23]=o('<h1 id="dbc-blockchain-主网-rpc-说明" tabindex="-1"><a class="header-anchor" href="#dbc-blockchain-主网-rpc-说明" aria-hidden="true">#</a> DBC-Blockchain 主网 RPC 说明</h1><h2 id="_1-rpc-说明" tabindex="-1"><a class="header-anchor" href="#_1-rpc-说明" aria-hidden="true">#</a> 1. RPC 说明</h2><h3 id="_1-1-适用版本" tabindex="-1"><a class="header-anchor" href="#_1-1-适用版本" aria-hidden="true">#</a> 1.1 适用版本</h3>',3)),s("p",null,[n[1]||(n[1]=a("文档适用 dbc 主网，主网分支")),s("a",b,[n[0]||(n[0]=s("code",null,"master",-1)),t(e)]),n[2]||(n[2]=a("，"))]),n[24]||(n[24]=o(`<ul><li><p>websocket 地址： <code>wss://info.dbcwallet.io</code>,</p></li><li><p>http 地址: <code>https://httpinfo.dbcwallet.io</code></p></li></ul><h3 id="_1-2-搭建自己的-rpc-节点" tabindex="-1"><a class="header-anchor" href="#_1-2-搭建自己的-rpc-节点" aria-hidden="true">#</a> 1.2 搭建自己的 RPC 节点</h3><p>除了使用 DBC 提供的<code>websocket接口</code>，还可以自己搭建同步节点使用自己的节点提供的<code>websocket</code>或<code>HTTP接口</code>获取数据。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 配置Rust编译环境</span>
<span class="token function">curl</span> https://getsubstrate.io <span class="token parameter variable">-sSf</span> <span class="token operator">|</span> <span class="token function">bash</span> <span class="token parameter variable">-s</span> -- <span class="token parameter variable">--fast</span>
<span class="token builtin class-name">source</span> ~/.cargo/env

<span class="token comment"># 编译dbc-chain</span>
<span class="token function">git</span> clone https://github.com/DeepBrainChain/DeepBrainChain-MainChain.git <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> DeepBrainChain-MainChain
<span class="token function">git</span> checkout v2.3
<span class="token function">cargo</span> build <span class="token parameter variable">--release</span>

<span class="token comment"># 运行同步节点：</span>
./target/release/dbc-chain --base-path ./db_data <span class="token parameter variable">--pruning</span> archive --rpc-cors all --no-mdns

<span class="token comment"># 端口参数：</span>
--rpc-port <span class="token number">9933</span>   <span class="token comment"># 指定你的节点监听RPC的端口。 9933 是默认值，因此该参数也可忽略</span>
--ws-port <span class="token number">9945</span>    <span class="token comment"># 指定你的节点用于监听 WebSocket 的端口。 默认端口为 9944</span>
<span class="token parameter variable">--port</span> <span class="token number">30333</span>      <span class="token comment"># 指定你用于监听 p2p 流量的节点端口。 30333 是默认端口，若无需更改，可以忽略该 flag</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上方法运行了同步节点之后，可以通过 <code>ws://127.0.0.1:9945</code> 调用 websocket 接口，通过<code>http://127.0.0.1:9933</code> 调用 http 接口。</p><p>如果想远程访问，需要为 websocket 或 http 配置域名，以支持 <code>wss</code> 或者 <code>https</code></p><p>使用 HTTP 接口获取数据的例子，可以查看本文件夹下的<code>dbc_chain_rpc.postman_collection.json</code>，导入 Postman 进行查看。</p><h3 id="_1-3-rpc-请求格式" tabindex="-1"><a class="header-anchor" href="#_1-3-rpc-请求格式" aria-hidden="true">#</a> 1.3 RPC 请求格式</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;jsonrpc&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token property">&quot;method&quot;</span><span class="token operator">:</span> method_name<span class="token punctuation">,</span>
  <span class="token property">&quot;params&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>params_1<span class="token punctuation">,</span> params_2<span class="token punctuation">,</span> ...<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>method_name</code> 为 RPC 方法名，params_1, params_2... 替换成需要的参数。</p><p>例如，利用 Postman 连接 websocket 查询<code>区块信息</code>：</p>`,11)),s("blockquote",null,[s("p",null,[n[4]||(n[4]=a("Postman 创建 websocket API 的方法：")),s("a",m,[n[3]||(n[3]=a("https://blog.postman.com/postman-supports-websocket-apis/")),t(e)])]),n[5]||(n[5]=s("figure",null,[s("img",{src:d,alt:"image-20211020111401731",tabindex:"0",loading:"lazy"}),s("figcaption",null,"image-20211020111401731")],-1))]),n[25]||(n[25]=s("h3",{id:"_1-4-如何访问链上历史数据",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-4-如何访问链上历史数据","aria-hidden":"true"},"#"),a(" 1.4 如何访问链上历史数据")],-1)),n[26]||(n[26]=s("p",null,"在 1.3 中，获取到的数据为链上的当前状态。如果想获取过去某个时间的状态，需要传入某个时间对应区块的 Hash。",-1)),n[27]||(n[27]=s("p",null,'如想要查看两天前的数据，在发送 post 请求的"params" 字段的最后一个参数添加两天前的区块 Hash 即可。',-1)),n[28]||(n[28]=s("h3",{id:"_1-5-未包含的-rpc-文档",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-5-未包含的-rpc-文档","aria-hidden":"true"},"#"),a(" 1.5 未包含的 RPC 文档")],-1)),s("p",null,[n[7]||(n[7]=a("本文档仅包含 DBC 主网 ")),n[8]||(n[8]=s("strong",null,[s("code",null,"自定义RPC的说明")],-1)),n[9]||(n[9]=a(" ，如果想查看 ")),n[10]||(n[10]=s("strong",null,[s("code",null,"波卡链原生RPC的文档说明")],-1)),n[11]||(n[11]=a(" ，可以参考: ")),s("a",k,[n[6]||(n[6]=a("https://polkadot.js.org/docs/substrate/rpc/；")),t(e)])]),n[29]||(n[29]=s("h3",{id:"_1-6-查看所有-支持的-rpc-的方法",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-6-查看所有-支持的-rpc-的方法","aria-hidden":"true"},"#"),a(" 1.6 查看所有 支持的 RPC 的方法")],-1)),s("p",null,[n[13]||(n[13]=a("可到 dbc 网页钱包：")),s("a",v,[n[12]||(n[12]=a("https://www.dbcwallet.io/")),t(e)]),n[14]||(n[14]=a(" ，点击左侧切换网络，在自定义终端中，输入 websocket 地址。然后如下图导航到 ")),n[15]||(n[15]=s("code",null,"RPC calls",-1)),n[16]||(n[16]=a("，查看区块链支持的所有 RPC。如图，选择 ")),n[17]||(n[17]=s("code",null,"rpc",-1)),n[18]||(n[18]=a("模块的")),n[19]||(n[19]=s("code",null,"methods",-1)),n[20]||(n[20]=a("方法，点击右边的")),n[21]||(n[21]=s("code",null,"提交RPC调用",-1)),n[22]||(n[22]=a("，将列出所有的 RPC 方法名。"))]),n[30]||(n[30]=o('<figure><img src="'+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_2-关于块高-奖励发放时间-与era的说明" tabindex="-1"><a class="header-anchor" href="#_2-关于块高-奖励发放时间-与era的说明" aria-hidden="true">#</a> 2. <strong>关于<code>块高</code>，奖励发放时间，与<code>Era</code>的说明</strong></h2><p>块高就是链上的时间。</p><h3 id="_2-1-获取当前块高" tabindex="-1"><a class="header-anchor" href="#_2-1-获取当前块高" aria-hidden="true">#</a> 2.1 获取当前块高</h3><ul><li><p>方法： <code>chain_getBlock</code></p></li><li><p>调用方法：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;jsonrpc&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token property">&quot;method&quot;</span><span class="token operator">:</span> <span class="token string">&quot;chain_getBlock&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;params&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>返回结果：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;jsonrpc&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;result&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;block&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      ...
      <span class="token property">&quot;header&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        ...
        <span class="token property">&quot;number&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0x2d8&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;parentHash&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0xc0e1b239fafc0edf3e08a908b5caecb27c2b351ed0daef3fc60c5600b28d6d7d&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;stateRoot&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0x55ce4794b2cdd21275656a80febf5133d882d909a2de6d40d7b8887bd65628bc&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;justification&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，&quot;number&quot;: &quot;0x2d8&quot; 即为块高，转为十进制为：728</p></li></ul><h3 id="_2-2-era-与奖励发放时间" tabindex="-1"><a class="header-anchor" href="#_2-2-era-与奖励发放时间" aria-hidden="true">#</a> 2.2 Era 与奖励发放时间</h3><ul><li><p>1 Era 为 2880 个区块高度，在 DBC 区块链上，约是 1 天。发放奖励的时间，为区块链高度的 <code>[2880*n, 2880*n+60]</code> 的时间区间。</p></li><li><p>在第 n Era 上线的机器，在 n+1 Era 结束时发放。即如果在 Era2 上线的机器即 [5761, 8640]，奖励将会在 Era4 开始前 60 个块的区间内发放 Era3 的奖励，即在 <code>2880*4=11520</code> 时开始发放。可以在之后查到 Era3 的奖励，如通过 erasMachineReleasedReward 方法，查到 era3 机器获得的奖励。</p></li><li><p>当前主网上，[529920, 532800] 为 Era1， [532801, 535680] 为 Era2...</p></li></ul>`,7))])}const f=p(u,[["render",h],["__file","dbc-rpc-readme.html.vue"]]);export{f as default};
