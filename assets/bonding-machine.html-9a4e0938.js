import{_ as c,V as i,W as s,X as e,Y as a,Z as t,$ as n,F as r}from"./framework-1d64dffd.js";const d="/assets/image-20210629104434008-35138cc3.png",h="/assets/image-20210714140945243-fa5d2c68.png",l="/assets/image-20210707140400114-34db11f5.png",u="/assets/image-20210714141352887-40929c0c.png",p="/assets/image-20210817114537368-a316f226.png",m="/assets/image-20210817114925965-ce0b2ddf.png",g="/assets/2021-08-09_11-15-16284796475672-6e47aa38.png",f="/assets/image-20210623143656481-80b86c89.png",b="/assets/image-20210623144049700-226c116f.png",_={},w=n('<h1 id="machine-onchain-steps" tabindex="-1"><a class="header-anchor" href="#machine-onchain-steps" aria-hidden="true">#</a> Machine Onchain steps</h1><h2 id="method-1-binding-via-web-wallet" tabindex="-1"><a class="header-anchor" href="#method-1-binding-via-web-wallet" aria-hidden="true">#</a> Method 1: Binding via web wallet</h2><h3 id="_0-ready-to-work" tabindex="-1"><a class="header-anchor" href="#_0-ready-to-work" aria-hidden="true">#</a> 0. Ready to work</h3><ul><li><p>Make sure DBC client is installed on the machine.</p></li><li><p>Before bonding GPU Machine online, please make sure you have enough balance in your wallet. (Each GPU need to stake 100,000 DBC).</p></li></ul><h2 id="stash-account-binding-control-account" tabindex="-1"><a class="header-anchor" href="#stash-account-binding-control-account" aria-hidden="true">#</a> Stash account binding control account</h2><h3 id="_1-1-description" tabindex="-1"><a class="header-anchor" href="#_1-1-description" aria-hidden="true">#</a> 1.1 Description：</h3>',6),v={href:"https://github.com/DeepBrainChain/DBC-DOC/blob/master/DBC_install/%E5%A4%9A%E9%87%8D%E7%AD%BE%E5%90%8D%E8%B4%A6%E6%88%B7.md",target:"_blank",rel:"noopener noreferrer"},k=n("<li><p>The <code>Stash Account</code>: When the GPU machine is bound onchain, the DBC will be staked from the <code>Stash Account</code>, and when the rewards are distributed, it will be issued to the <code>Stash Account</code>.</p></li><li><p><code>Control account</code> is the manager, responsible for the operation of the machine, maintenance, etc.</p></li><li><p>The <code>control account</code> also needs some DBC, and some transaction fee generated by the operation on the chain will be deducted from the <code>control account</code>.</p></li>",3),y=n('<h3 id="_1-2-operation" tabindex="-1"><a class="header-anchor" href="#_1-2-operation" aria-hidden="true">#</a> 1.2 Operation</h3><p>Navigate to: <code>Developer</code>--<code>Transaction</code>, as shown below, select the <code>setController</code> method of the <code>onlineProfile</code> module, select your <code>stash account</code> and <code>control account</code> respectively, and click bind in the lower right corner</p><figure><img src="'+d+'" alt="image-20210629104434008" tabindex="0" loading="lazy"><figcaption>image-20210629104434008</figcaption></figure><blockquote><p>As shown above, BOB_STASH account (<code>Stash account</code>) set DAVE account as <code>control account</code>.</p><p><code>Stash Account</code>: <code>5HpG9w8EBLe5XCrbczpwq5TSXvedjrBGCwqxK1iQ7qUsSWFc</code></p><p><code>Control account</code>: <code>5DAAnrj7VHTznn2AWBemMuyBwZWs6FNFjdyVXUeYum3PTXFy</code></p></blockquote><h3 id="_1-3-check-whether-the-stash-account-and-control-account-are-successfully-bound" tabindex="-1"><a class="header-anchor" href="#_1-3-check-whether-the-stash-account-and-control-account-are-successfully-bound" aria-hidden="true">#</a> 1.3 Check whether the stash account and control account are successfully bound</h3><p>Query whether the stash account and the control account are successfully bound: as shown in the figure below, when the stash account is successfully bound to the control account, you can select <code>controllerStash</code> of the <code>onlineProfile</code> module through <code>Developer</code>--<code>Chain Status</code>, to query the stash account corresponding to the <code>control account</code>. In the figure below, a stash account corresponding to a control account is queried.</p><figure><img src="'+h+`" alt="image-20210714140945243" tabindex="0" loading="lazy"><figcaption>image-20210714140945243</figcaption></figure><h2 id="_2-the-machine-generates-a-signed-message" tabindex="-1"><a class="header-anchor" href="#_2-the-machine-generates-a-signed-message" aria-hidden="true">#</a> 2. The machine generates a signed message</h2><blockquote><p>You need to use the machine&#39;s private key to generate a signed message and send it to the chain to confirm the stash account own this machine.</p></blockquote><h3 id="_2-1-query-machine-id-and-machine-private-key" tabindex="-1"><a class="header-anchor" href="#_2-1-query-machine-id-and-machine-private-key" aria-hidden="true">#</a> 2.1 Query <code>Machine ID</code> and \`Machine Private Key\`\`</h3><p>You need to query the machine private key on the machine where the DBC client program is installed. And use the private key to generate a signed message and send it to the chain.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># The machine ID and private key are in the directory of the dbc installation program, such as:</span>
<span class="token comment"># /home/dbc/0.3.x.x/dbc_repo/dat/node.dat</span>
<span class="token comment"># Its content is:</span>
<span class="token assign-left variable">node_id</span><span class="token operator">=</span>8eaf04151687736326c9fea17e25fc5287613693c912909cb226aa4794f26a48          <span class="token comment"># Machine ID</span>
<span class="token assign-left variable">node_private_key</span><span class="token operator">=</span>398f0c28f98885e046333d4a41c19cee4c37368a9832c6502f6cfd182e2aef89 <span class="token comment"># Machine private key</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="use-machine-private-key-to-generate-signature-data" tabindex="-1"><a class="header-anchor" href="#use-machine-private-key-to-generate-signature-data" aria-hidden="true">#</a> Use <code>machine private key</code> to generate signature data</h3>`,13),C={href:"https://github.com/DeepBrainChain/DeepBrainChain-MainChain/blob/master/scripts/test_script/gen_signature.js",target:"_blank",rel:"noopener noreferrer"},x=n(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#Instructions</span>
<span class="token number">1</span>. Install nodejs <span class="token number">14</span> on the linux server <span class="token punctuation">(</span>the version must be <span class="token number">14</span>, otherwise there will be other errors, please Google <span class="token keyword">for</span> the installation method<span class="token punctuation">)</span>
<span class="token number">2</span>. Clone script: <span class="token function">git</span> clone https://github.com/DeepBrainChain/DeepBrainChain-MainChain.git
<span class="token number">3</span>. Installation: <span class="token builtin class-name">cd</span> DeepBrainChain-MainChain/scripts/test_script <span class="token operator">&amp;&amp;</span> <span class="token function">npm</span> <span class="token function">install</span>
<span class="token number">4</span>. Execute the script
<span class="token function">node</span> gen_signature.js <span class="token parameter variable">--key</span> 0x398f0c28f98885e046333d4a41c19cee4c37368a9832c6502f6cfd182e2aef89 <span class="token parameter variable">--msg</span> 8eaf04151687736326c9fea17e25fc5287613693c912909cb226aa4794f26a485CiPPseXPECbkjWCa6MnjNokrgYjMqmKndv2rSnekmSK2DjL

<span class="token comment">### Message: 8eaf04151687736326c9fea17e25fc5287613693c912909cb226aa4794f26a485CiPPseXPECbkjWCa6MnjNokrgYjMqmKndv2rSnekmSK2DjL</span>
<span class="token comment">### Signer: 8eaf04151687736326c9fea17e25fc5287613693c912909cb226aa4794f26a48</span>
<span class="token comment">### Signature: 0x5cc8b4c49b244d7c071b124ef68119d7549dd805ea43f69e3c142fd5909f926041a9cad93b16085d72431df2d1164e7911085423bca16625295583686f2fce8c</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>--key</code> specifies <code>machine private key</code>,</p><p>and <strong>key is prefixed with 0x</strong>;</p><p><code>--msg</code> specifies the message that needs to be signed, and the message content is <code>machine ID+fund account</code>;</p><p>The data after <code>Signature:</code> is the <strong>signature data</strong>.</p></blockquote><h3 id="_2-3-use-control-account-to-bond-machine-to-stash-account" tabindex="-1"><a class="header-anchor" href="#_2-3-use-control-account-to-bond-machine-to-stash-account" aria-hidden="true">#</a> 2.3 Use <code>Control Account</code> to bond machine to stash_account</h3><p>Now, we need to broadcast the <strong><em>signature data</em></strong> generated in the previous step through the <code>control account</code>.</p><p>Navigate to: <code>Developer</code>--<code>Transaction</code>, and select the <code>bondMachine</code> method of the <code>onlineProfile</code> module as shown below. Use <code>Control Account</code> to bind <code>Machine ID</code> (<code>MachineId</code>) with <code>Control Account</code>. Fill in the parameters as shown below:</p><figure><img src="`+l+'" alt="image-20210707140400114" tabindex="0" loading="lazy"><figcaption>image-20210707140400114</figcaption></figure><h3 id="_2-4-query-whether-the-machine-is-successfully-bound" tabindex="-1"><a class="header-anchor" href="#_2-4-query-whether-the-machine-is-successfully-bound" aria-hidden="true">#</a> 2.4 Query whether the machine is successfully bound:</h3><p>After completing this step, you can query the machines in the system through <code>Developer</code>--<code>Chain Status</code>--<code>onlineProfile</code>--<code>liveMachines</code>. As shown in the figure below, a machine is queried that has been bound. Next, you need to add machine information</p><figure><img src="'+u+'" alt="image-20210714141352887" tabindex="0" loading="lazy"><figcaption>image-20210714141352887</figcaption></figure><h2 id="_3-control-account-need-to-generate-computer-room" tabindex="-1"><a class="header-anchor" href="#_3-control-account-need-to-generate-computer-room" aria-hidden="true">#</a> 3. <code>Control account</code> need to generate &quot;computer room&quot;</h2><h3 id="instruction" tabindex="-1"><a class="header-anchor" href="#instruction" aria-hidden="true">#</a> instruction</h3><p><strong>When the stash account is bound to the machine for the first time or the machine is in a new computer room</strong>, a new computer room ID needs to be generated. A transaction fee of <code>10 DBC</code> is paid for each generation of a computer room.</p><p>If the machines to be bound are in the same computer room, just generate the computer room information once. If the machines are in different computer rooms, the corresponding number of computer rooms will be generated according to the situation. When adding machine information, select the corresponding computer room (if the machines are in the same computer room, you can add the same computer room ID each time you add machine information).</p><h3 id="_3-1-operation-generate-new-room-information-on-the-chain" tabindex="-1"><a class="header-anchor" href="#_3-1-operation-generate-new-room-information-on-the-chain" aria-hidden="true">#</a> 3.1 Operation: Generate new room information on the chain</h3><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-2-query-the-computer-room-records-generated-under-the-stash-account" tabindex="-1"><a class="header-anchor" href="#_3-2-query-the-computer-room-records-generated-under-the-stash-account" aria-hidden="true">#</a> 3.2 Query the computer room records generated under the stash account</h3><p>Navigate to <code>developer</code>--<code>chain status</code>, through <code>stash account</code>, view the computer room bound under <strong>stash account</strong>: the following figure generates two computer rooms, and the query parameter is the fund account.</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_4-control-account-add-machine-information" tabindex="-1"><a class="header-anchor" href="#_4-control-account-add-machine-information" aria-hidden="true">#</a> 4. <code>Control account</code> add machine information</h2><p><code>Control account</code> also needs to add machine information: Navigate to <code>Developer</code> -- <code>Transaction</code>--<code>onlineProfile</code>--<code>addMachineInfo</code></p><figure><img src="'+g+'" alt="2021-08-09_11-15" tabindex="0" loading="lazy"><figcaption>2021-08-09_11-15</figcaption></figure><ul><li><p>Parameter description:</p><ul><li><p>server_name: Select the computer room ID generated in the previous step</p></li><li><p>upload_net: upload bandwidth (take 20MB bandwidth as an example, fill in 20).</p></li><li><p>download_net: download bandwidth (take 20MB bandwidth as an example, fill in 20).</p></li><li><p>longitude: Longitude. Take the East longitude 131.1548123 as an example, fill in <code>East 1311548</code>. Be careful not to fill in the longitude and latitude upside down. The error can be within the range of 30 km, and the staking will be deducted if the content is wrong).</p></li><li><p>latitude: Latitude. Take south latitude 121.143253 as an example, fill in <code>South 1211432</code>. Be careful not to fill in the longitude and latitude upside down.The error can be within the range of 30 km, and the pledge will be deducted if the content is wrong.</p></li><li><p>Computer room network information, you can choose from the following according to the situation: (China Mobile: China Mobile, China Unicom: China Unicom, China Telecom: China Telecom, non-Chinese operators fill in according to their actual names.The pledge will be deducted if the content is wrong)</p></li></ul></li></ul><h2 id="_5-check-and-receive-rewards" tabindex="-1"><a class="header-anchor" href="#_5-check-and-receive-rewards" aria-hidden="true">#</a> 5. Check and receive rewards</h2><h3 id="_5-1-check-rewards" tabindex="-1"><a class="header-anchor" href="#_5-1-check-rewards" aria-hidden="true">#</a> 5.1. Check rewards</h3><p>In the developer--chain status, select: the <code>stashMachines</code> method of the <code>onlineProfile</code> module, fill in the parameters in <strong><code>stash account</code></strong>, you will be able to find the detailed information of the reward for the <code>stash account</code>.</p><p>Among them, <code>can_claim_reward</code> is the reward that can be claimed, and <code>left_reard</code> is the remaining part of the reward obtained every day before (the remaining 75%, this 75% will be released in the subsequent 150 antennas).</p><figure><img src="'+f+'" alt="image-20210623143656481" tabindex="0" loading="lazy"><figcaption>image-20210623143656481</figcaption></figure><h3 id="_5-2-collect-rewards" tabindex="-1"><a class="header-anchor" href="#_5-2-collect-rewards" aria-hidden="true">#</a> 5.2. Collect rewards</h3><p>Use <strong>Control Account</strong> to claim reward, and rewards will be issued to <strong><code>Stash Account</code></strong>.</p><figure><img src="'+b+'" alt="image-20210623144049700" tabindex="0" loading="lazy"><figcaption>image-20210623144049700</figcaption></figure><h2 id="_6-query-the-machine-bounded-to-the-account" tabindex="-1"><a class="header-anchor" href="#_6-query-the-machine-bounded-to-the-account" aria-hidden="true">#</a> 6. Query the machine bounded to the account</h2><ul><li><p>View the machines on the chain under the fund account: Navigate to <code>Developer</code>----<code>Chain Status</code>----<code>Storage</code>----<code>onlineProfile</code>----<code>stashMachines</code></p></li><li><p>View the machines on the chain under the control account: Navigate to <code>Developer</code>----<code>Chain Status</code>----<code>Storage</code>----<code>onlineProfile</code>----<code>controllerMachines</code></p></li></ul>',32);function D(B,M){const o=r("ExternalLinkIcon");return i(),s("div",null,[w,e("ul",null,[e("li",null,[e("p",null,[a("For the safety of your account funds, we strongly recommend using a multi-signature account as a capital account. For multi-signature accounts, please go to "),e("a",v,[a("https://github.com/DeepBrainChain/DBC-DOC/blob/master/DBC_install/多重签名账户.md"),t(o)])])]),k]),y,e("p",null,[a("Use the following "),e("a",C,[a("script"),t(o)]),a(" to generate signature data.")]),x])}const S=c(_,[["render",D],["__file","bonding-machine.html.vue"]]);export{S as default};
