import{_ as e}from"./plugin-vue_export-helper.21dcd24c.js";import{o as n,c as s,a}from"./app.38166bb6.js";const i={},t=a(`<h1 id="install-dbc-computing-node" tabindex="-1"><a class="header-anchor" href="#install-dbc-computing-node" aria-hidden="true">#</a> Install DBC computing node</h1><h2 id="prepare-before-installation-based-on-the-fixed-public-ip-address-that-has-been-configured-deploy-the-kvm-installation-environment" tabindex="-1"><a class="header-anchor" href="#prepare-before-installation-based-on-the-fixed-public-ip-address-that-has-been-configured-deploy-the-kvm-installation-environment" aria-hidden="true">#</a> Prepare before installation (based on the fixed public IP address that has been configured), deploy the KVM installation environment</h2><div class="custom-container tip"><p class="custom-container-title">Notice!</p><p>The system uses the 20.04 server version</p></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;140.82.114.4 gitub.com&quot;</span>   <span class="token operator">&gt;&gt;</span> /etc/hosts
<span class="token function">sudo</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;199.232.5.194 github.global.ssl.fastly.net&quot;</span>   <span class="token operator">&gt;&gt;</span> /etc/hosts
<span class="token function">sudo</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;nameserver 8.8.4.4&quot;</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/resolv.conf <span class="token operator">&gt;</span> /dev/null
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade -y
<span class="token function">sudo</span> <span class="token function">apt-get</span>  <span class="token function">install</span> qemu-kvm libvirt-clients libvirt-daemon-system bridge-utils virt-manager ovmf cpu-checker <span class="token function">vim</span> <span class="token function">expect</span> -y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="create-and-mount-the-xfs-file-system" tabindex="-1"><a class="header-anchor" href="#create-and-mount-the-xfs-file-system" aria-hidden="true">#</a> create and mount the XFS file system</h2><h3 id="check-the-hard-disk-partition" tabindex="-1"><a class="header-anchor" href="#check-the-hard-disk-partition" aria-hidden="true">#</a> Check the hard disk partition</h3><p><code>lsblk</code></p><h3 id="create-a-data-disk-folder-format-the-hard-disk-and-mount-the-hard-disk-the-data-disk-mounting-directory-must-be-data" tabindex="-1"><a class="header-anchor" href="#create-a-data-disk-folder-format-the-hard-disk-and-mount-the-hard-disk-the-data-disk-mounting-directory-must-be-data" aria-hidden="true">#</a> Create a data disk folder, format the hard disk, and mount the hard disk (the data disk mounting directory must be /data)</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">mkdir</span> /data
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> xfsprogs -y
<span class="token function">sudo</span> mkfs.xfs -n <span class="token assign-left variable">ftype</span><span class="token operator">=</span><span class="token number">1</span> -f /dev/sdb  \uFF08Whether it is sdb here depends on the situation of lsblk\uFF09
<span class="token function">sudo</span> <span class="token function">mount</span>  -o pquota /dev/sdb /data
<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">777</span> /data
<span class="token function">sudo</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;/dev/sdb /data     xfs pquota 0 1&quot;</span> <span class="token operator">&gt;&gt;</span> /etc/fstab
<span class="token function">sudo</span> <span class="token function">mount</span> -a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="determine-whether-the-machine-supports-virtualization" tabindex="-1"><a class="header-anchor" href="#determine-whether-the-machine-supports-virtualization" aria-hidden="true">#</a> Determine whether the machine supports virtualization</h2><h3 id="turn-on-hardware-support" tabindex="-1"><a class="header-anchor" href="#turn-on-hardware-support" aria-hidden="true">#</a> Turn on hardware support</h3><blockquote><p>BIOS open VT-d (search according to the motherboard type browser) VT (VT-x) and VT-d support, you need to set related support to enable, which is enabled by default</p><p>Path under normal circumstances: Processor\u2014IIO Configuration\u2014Intel@ VT for Directed I/O(VT-d)</p></blockquote><h3 id="environment-dependence-check-whether-the-cpu-supports-virtualization-and-whether-kvm-is-available" tabindex="-1"><a class="header-anchor" href="#environment-dependence-check-whether-the-cpu-supports-virtualization-and-whether-kvm-is-available" aria-hidden="true">#</a> Environment dependence, check whether the CPU supports virtualization and whether KVM is available</h3><p><code>egrep -c &#39;(svm|vm)&#39; /proc/cpuinfo</code></p><blockquote><p>CPU detection, if it is displayed as 0, virtualization is not supported</p></blockquote><p><code>kvm-ok</code></p><blockquote><p>Check if kvm is available</p><p>display INFO: /dev/kvm exists<br> KVM acceleration can be used Indicates that subsequent operations can be performed. If the display does not match it, please check whether VT-d is turned on correctly</p></blockquote><h3 id="_3-check-whether-ip-forward-forwarding-is-enabled" tabindex="-1"><a class="header-anchor" href="#_3-check-whether-ip-forward-forwarding-is-enabled" aria-hidden="true">#</a> 3.Check whether ip_forward forwarding is enabled</h3><blockquote><p>Check if /proc/sys/net/ipv4/ip_forward is 1, if not, execute:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>sudo sh -c &#39;echo &quot;net.ipv4.ip_forward=1&quot; &gt;&gt; /etc/sysctl.conf&#39;
sudo sysctl -p
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Check if there is output from lsmod | grep br_netfilter If there is no output then execute:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>sudo sh -c &#39;echo &quot;br_netfilter&quot; &gt; /etc/modules-load.d/br_netfilter.conf&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>It needs to be restarted after execution, or it can be restarted after setting the graphics card pass-through</p></blockquote><h3 id="vfio-environment-preparation" tabindex="-1"><a class="header-anchor" href="#vfio-environment-preparation" aria-hidden="true">#</a> vfio environment preparation</h3><ul><li>Set a blacklist so that the card is not occupied</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">vim</span> /etc/modprobe.d/blacklist.conf
<span class="token comment">#Finally add content:</span>
blacklist snd_hda_intel
blacklist amd76x_edac
blacklist vga16fb
blacklist nouveau
blacklist rivafb
blacklist nvidiafb
blacklist rivatv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Setting up graphics card passthrough</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Querying the graphics card ID</span>
lspci -nnv <span class="token operator">|</span> <span class="token function">grep</span> NVIDIA
Copy the graphics card id, such as 10de:2231 10de:1aef, the duplicate content can be kept only once

<span class="token comment">#Modify the kernel file</span>
<span class="token function">sudo</span> <span class="token function">vim</span> /etc/default/grub
<span class="token comment">#Add in the GRUB_CMDLINE_LINUX_DEFAULT field (if it is an AMD platform, change intel_iommu=on to amd_iommu=on)</span>
quiet splash <span class="token assign-left variable">intel_iommu</span><span class="token operator">=</span>on kvm.ignore_msrs<span class="token operator">=</span><span class="token number">1</span> vfio-pci.ids<span class="token operator">=</span>Graphics card ids, separated by commas
<span class="token comment">#Add in GRUB_CMDLINE_LINUX field</span>
quiet splash <span class="token assign-left variable">intel_iommu</span><span class="token operator">=</span>on <span class="token assign-left variable">iommu</span><span class="token operator">=</span>pt rd.driver.pre<span class="token operator">=</span>vfio-pci


<span class="token comment">#update the kernel</span>
<span class="token function">sudo</span> <span class="token function">update-grub</span>

<span class="token comment">#reboot the machine</span>
<span class="token function">reboot</span>
<span class="token comment">#Query graphics card usage</span>
lspci -vv -s <span class="token operator">&lt;</span>graphics card PCI interface, eg 00:01.<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span> <span class="token operator">|</span> <span class="token function">grep</span> driver
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>If vfio-pci is displayed, it is normal. If it is not vfio-pci, please check whether the grub file is correct. If there is no output, please perform the following manual binding</p></blockquote><ul><li>Check kernel parameters:</li></ul><blockquote><p>Check that both <code>/proc/sys/net/bridge/bridge-nf-call-iptables</code> and <code>/proc/sys/net/bridge/bridge-nf-call-ip6tables</code>=1</p></blockquote><p><strong>Manually bind the GPU (only if there is no output from the previous query, the following example is only for demonstration, please replace it according to the actual query result)</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment">#Execute the command to bind (note: the content after echo is the graphics card id queried by the machine) The already occupied PCI does not need to be bound manually.</span>
<span class="token function">sudo</span> -i
<span class="token function">sudo</span> <span class="token builtin class-name">echo</span> 10de 1e82 <span class="token operator">&gt;</span> /sys/bus/pci/drivers/vfio-pci/new_id
<span class="token function">sudo</span> <span class="token builtin class-name">echo</span> 10de <span class="token number">2206</span> <span class="token operator">&gt;&gt;</span> /sys/bus/pci/drivers/vfio-pci/new_id
\u2026\u2026\u2026\u2026


<span class="token comment">#Check again after the binding is completed (all items of each card must be checked)</span>
lspci -vv -s <span class="token number">17</span>:00.0 <span class="token operator">|</span> <span class="token function">grep</span> driver
<span class="token comment">#If Kernel driver in use : vfio-pci appears, the binding is successful. If still unsuccessful, go back and check</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="after-confirming-that-the-graphics-card-of-the-machine-is-occupied-by-vfio-pci-start-the-libvirtd-service-and-set-the-boot-to-start-automatically" tabindex="-1"><a class="header-anchor" href="#after-confirming-that-the-graphics-card-of-the-machine-is-occupied-by-vfio-pci-start-the-libvirtd-service-and-set-the-boot-to-start-automatically" aria-hidden="true">#</a> After confirming that the graphics card of the machine is occupied by vfio-pci, start the libvirtd service and set the boot to start automatically</h2><h3 id="_1-turn-on-the-virt-tcp-monitoring-service" tabindex="-1"><a class="header-anchor" href="#_1-turn-on-the-virt-tcp-monitoring-service" aria-hidden="true">#</a> 1. Turn on the virt tcp monitoring service:</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">vim</span> /etc/libvirt/libvirtd.conf
<span class="token comment">#After the arrow is the modified content: remove the # in front of these three lines, and change sasl to none</span>

<span class="token comment">#listen_tls = 0	=======&gt;	listen_tls = 0</span>
<span class="token comment">#listen_tcp = 1	=======&gt;	listen_tcp = 1</span>
<span class="token comment">#auth_tcp = &quot;sasl&quot;	======&gt;	auth_tcp = &quot;none&quot;</span>

<span class="token function">sudo</span> <span class="token function">vim</span> /etc/default/libvirtd
<span class="token comment">#Corresponding modification to the following configuration</span>
<span class="token assign-left variable">libvirtd_opts</span><span class="token operator">=</span><span class="token string">&quot;-l&quot;</span>

<span class="token comment">#After modification, please execute:</span>
systemctl mask libvirtd.socket libvirtd-ro.socket libvirtd-admin.socket libvirtd-tls.socket libvirtd-tcp.socket
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-start-libvirtd-and-set-up-auto-start-check-service-status" tabindex="-1"><a class="header-anchor" href="#_2-start-libvirtd-and-set-up-auto-start-check-service-status" aria-hidden="true">#</a> 2. Start libvirtd and set up auto-start &amp; check service status</h3><ul><li>sudo systemctl restart libvirtd.service</li><li>sudo systemctl enable libvirtd.service</li><li>systemctl status libvirtd</li></ul><p><strong>3\u3001Test whether libvirtd is started successfully</strong></p><ul><li>virsh connect qemu+tcp://localhost:16509/system</li><li>If there is no output error, it means the startup is successful</li></ul><h2 id="create-a-dbc-user" tabindex="-1"><a class="header-anchor" href="#create-a-dbc-user" aria-hidden="true">#</a> Create a dbc user</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">wget</span> http://116.85.24.172:20444/static/add_dbc_user.sh
<span class="token function">sudo</span> <span class="token function">chmod</span> +x add_dbc_user.sh
<span class="token function">sudo</span> ./add_dbc_user.sh dbc
<span class="token comment">#dbcUser password is set by yourself</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="install-the-dbc-node-program" tabindex="-1"><a class="header-anchor" href="#install-the-dbc-node-program" aria-hidden="true">#</a> Install the DBC node program</h2><ul><li><strong>Note</strong>: need to switch to dbc user installation</li></ul><ol><li>download install script: install_mining.sh http://119.6.235.169:9000/dbc/install_update_script/mainnet/install_mining.sh</li><li>add executable permissions <code>chmod +x ./install_mining.sh</code></li><li>run install_mining.sh <code>./install_mining.sh [install_dir]</code></li></ol><p>(During the installation process, you need to input two listen port)</p><h2 id="download-the-mirror-template" tabindex="-1"><a class="header-anchor" href="#download-the-mirror-template" aria-hidden="true">#</a> Download the mirror template</h2><ul><li>http://119.6.235.169:9000/image</li></ul><p>Download: ubuntu.qcow2 and ubuntu-2004.qcow2 these two mirrors</p><h2 id="back-up-the-machine-id-and-private-key-very-important-if-this-private-key-is-lost-50-of-the-pledged-coins-will-be-lost-please-pay-attention-to-multiple-backups" tabindex="-1"><a class="header-anchor" href="#back-up-the-machine-id-and-private-key-very-important-if-this-private-key-is-lost-50-of-the-pledged-coins-will-be-lost-please-pay-attention-to-multiple-backups" aria-hidden="true">#</a> Back up the machine id and private key (very important,if this private key is lost, 50% of the pledged coins will be lost, please pay attention to multiple backups)</h2><p>Back up the contents of the following file: <code> /home/dbc/0.3.7.3/dbc_repo/dat/node.dat</code>, put it in a safe place, and use it later If you reinstall the system or reinstall DBC later, you need to use the original id and private key, otherwise the pledged coins will be deducted</p><h2 id="test-to-create-a-virtual-machine-with-graphics-card-pass-through-to-check-whether-the-previous-configuration-is-correct" tabindex="-1"><a class="header-anchor" href="#test-to-create-a-virtual-machine-with-graphics-card-pass-through-to-check-whether-the-previous-configuration-is-correct" aria-hidden="true">#</a> Test to create a virtual machine with graphics card pass-through to check whether the previous configuration is correct</h2><ul><li>Test program download address: http://119.6.235.169:9000/dbc/package/check_env</li><li>Binary file, add execute permission and execute directly: chmod 777 chec_env ; ./check_env</li><li>If the green check &#39;vm domain_test successful&#39; appears, it means success. If it does not appear, please check whether the previous configurations are correct.</li></ul><h2 id="check-whether-the-various-hardware-parameters-of-the-machine-are-normal" tabindex="-1"><a class="header-anchor" href="#check-whether-the-various-hardware-parameters-of-the-machine-are-normal" aria-hidden="true">#</a> Check whether the various hardware parameters of the machine are normal</h2><ul><li>If the previous step is successful, a virtual machine will be successfully created, and log in to the virtual machine through ssh, where: vm_local_ip is the virtual machine&#39;s intranet ip address, the user name is dbc, and pwd is the login password</li><li><img src="https://user-images.githubusercontent.com/32829693/129731433-3e01b669-f274-419e-9ea0-d7891705a12e.png" alt="image"></li><li>Then cd to the test script directory and run:\u3010pytest .\u3011\uFF0C <ul><li>cd /test/dbc_gpu_server_test/</li><li>sudo -i (Switch to root user)</li><li>pytest .</li></ul></li><li>A total of 18 tests; <ul><li>10 unit tests, testing CPU, memory, hard disk, graphics card, video memory, cuda usability, etc.;</li><li>7 integration tests to test whether the actual usage conditions are normal (such as pytorch calculation, training and inference), and eliminate potential hardware failures;</li><li>1 benchmark speed test, testing the training and inference of dozens of CNN networks, lasting about ten minutes;</li><li>If there is no red error, it will pass. If there is a red F/error, the test item corresponding to the error will be displayed, which can be checked according to the information;</li><li>The full test process of 4 cards 2080ti is about 10 minutes. If the test time is too long, such as more than half an hour, there may be a problem with the machine, and the test can be aborted in advance.</li><li>Short test summary info in the test result: If all are passed, it means the test passed, as long as one item is failed, it means the test failed and the fault needs to be checked;</li><li>After the end, the &#39;result&#39; folder is generated to export the performance report;</li></ul></li><li>Back to the host, shut down and delete the tested virtual machine: ./check_env --localip x.x.x.x (x.x.x.x is the internal network ip address of the virtual machine. If you do not operate this step, the dbc program will not be able to start the new virtual machine. Passed on-chain verification)</li></ul><h2 id="if-the-execution-of-pytest-is-stuck-or-nvidia-does-not-have-any-calls-please-troubleshoot-according-to-the-following-ideas" tabindex="-1"><a class="header-anchor" href="#if-the-execution-of-pytest-is-stuck-or-nvidia-does-not-have-any-calls-please-troubleshoot-according-to-the-following-ideas" aria-hidden="true">#</a> If the execution of pytest is stuck or nvidia does not have any calls, please troubleshoot according to the following ideas</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Check if vfio reports an error dmesg | grep vfio-pci</span>

root@HJICT:~<span class="token comment"># dmesg | grep vfio-pci</span>
<span class="token punctuation">[</span>   <span class="token number">42.583025</span><span class="token punctuation">]</span> vfio-pci 0000:01:00.0: vgaarb: changed VGA decodes: <span class="token assign-left variable">olddecodes</span><span class="token operator">=</span>io+mem,decodes<span class="token operator">=</span>io+mem:owns<span class="token operator">=</span>io+mem
<span class="token punctuation">[</span>   <span class="token number">79.128425</span><span class="token punctuation">]</span> vfio-pci 0000:01:00.0: vfio_ecap_init: hiding ecap 0x1e@0x258
<span class="token punctuation">[</span>   <span class="token number">79.128446</span><span class="token punctuation">]</span> vfio-pci 0000:01:00.0: vfio_ecap_init: hiding ecap 0x19@0x900
<span class="token punctuation">[</span>   <span class="token number">79.128454</span><span class="token punctuation">]</span> vfio-pci 0000:01:00.0: vfio_ecap_init: hiding ecap 0x26@0xc1c
<span class="token punctuation">[</span>   <span class="token number">79.128457</span><span class="token punctuation">]</span> vfio-pci 0000:01:00.0: vfio_ecap_init: hiding ecap 0x27@0xd00
<span class="token punctuation">[</span>   <span class="token number">79.128461</span><span class="token punctuation">]</span> vfio-pci 0000:01:00.0: vfio_ecap_init: hiding ecap 0x25@0xe00
<span class="token punctuation">[</span>   <span class="token number">79.129879</span><span class="token punctuation">]</span> vfio-pci 0000:01:00.0: BAR <span class="token number">1</span>: can<span class="token string">&#39;t reserve [mem 0x90000000-0x9fffffff 64bit pref]
[   79.148593] vfio-pci 0000:01:00.1: vfio_ecap_init: hiding ecap 0x25@0x160
[  183.031546] vfio-pci 0000:01:00.0: BAR 1: can&#39;</span>t reserve <span class="token punctuation">[</span>mem 0x90000000-0x9fffffff 64bit pref<span class="token punctuation">]</span>
<span class="token punctuation">[</span>  <span class="token number">183.031575</span><span class="token punctuation">]</span> vfio-pci 0000:01:00.0: BAR <span class="token number">1</span>: can<span class="token string">&#39;t reserve [mem 0x90000000-0x9fffffff 64bit pref]
[  183.049344] vfio-pci 0000:01:00.0: BAR 1: can&#39;</span>t reserve <span class="token punctuation">[</span>mem 0x90000000-0x9fffffff 64bit pref<span class="token punctuation">]</span>
<span class="token punctuation">[</span>  <span class="token number">183.049375</span><span class="token punctuation">]</span> vfio-pci 0000:01:00.0: BAR <span class="token number">1</span>: can&#39;t reserve <span class="token punctuation">[</span>mem 0x90000000-0x9fffffff 64bit pref<span class="token punctuation">]</span>

<span class="token comment"># vfio-pci has an obvious bug, look further</span>

root@HJICT:~<span class="token comment"># cat /proc/iomem</span>
00000000-00000fff <span class="token builtin class-name">:</span> Reserved
00001000-0009d3ff <span class="token builtin class-name">:</span> System RAM
0009d400-0009ffff <span class="token builtin class-name">:</span> Reserved
000a0000-000bffff <span class="token builtin class-name">:</span> PCI Bus 0000:00
000c0000-000cf3ff <span class="token builtin class-name">:</span> Video ROM
000e0000-000fffff <span class="token builtin class-name">:</span> Reserved
  000f0000-000fffff <span class="token builtin class-name">:</span> System ROM
00100000-8ceacfff <span class="token builtin class-name">:</span> System RAM
8cead000-8e718fff <span class="token builtin class-name">:</span> Reserved
8e719000-8e895fff <span class="token builtin class-name">:</span> System RAM
8e896000-8ec98fff <span class="token builtin class-name">:</span> ACPI Non-volatile Storage
8ec99000-8f40efff <span class="token builtin class-name">:</span> Reserved
8f40f000-8f40ffff <span class="token builtin class-name">:</span> System RAM
8f410000-8fffffff <span class="token builtin class-name">:</span> Reserved
<span class="token number">90000000</span>-dfffffff <span class="token builtin class-name">:</span> PCI Bus 0000:00
  <span class="token number">90000000</span>-a1ffffff <span class="token builtin class-name">:</span> PCI Bus 0000:01
    <span class="token number">90000000</span>-9fffffff <span class="token builtin class-name">:</span> 0000:01:00.0
      <span class="token number">90000000</span>-9fffffff <span class="token builtin class-name">:</span> vesafb
    a0000000-a1ffffff <span class="token builtin class-name">:</span> 0000:01:00.0
      a0000000-a1ffffff <span class="token builtin class-name">:</span> vfio-pci
  a2000000-a30fffff <span class="token builtin class-name">:</span> PCI Bus 0000:01
    a2000000-a2ffffff <span class="token builtin class-name">:</span> 0000:01:00.0
      a2000000-a2ffffff <span class="token builtin class-name">:</span> vfio-pci
    a3080000-a3083fff <span class="token builtin class-name">:</span> 0000:01:00.1
      a3080000-a3083fff <span class="token builtin class-name">:</span> vfio-pci
  a3100000-a31fffff <span class="token builtin class-name">:</span> 0000:00:1f.3
  a3200000-a32fffff <span class="token builtin class-name">:</span> PCI Bus 0000:02
    a3200000-a32001ff <span class="token builtin class-name">:</span> 0000:02:00.0
      a3200000-a32001ff <span class="token builtin class-name">:</span> ahci



<span class="token comment">#  As you can see above, 90000000-9fffffff is occupied by vesafb, not vfio-pci</span>

<span class="token comment"># Modify /etc/default/grub, close vga,</span>
<span class="token assign-left variable">GRUB_CMDLINE_LINUX_DEFAULT</span><span class="token operator">=</span><span class="token string">&quot;quiet splash intel_iommu=on iommu=pt pcie_acs_override=multifunction nofb video=vesafb:off video=efifb:off vga=off&quot;</span>
<span class="token assign-left variable">GRUB_CMDLINE_LINUX</span><span class="token operator">=</span><span class="token string">&quot;quiet splash intel_iommu=on iommu=pt rd.driver.pre=vfio-pci&quot;</span>


update and restart
update-initramfs -u -k all
<span class="token function">update-grub</span>
<span class="token function">reboot</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="check-whether-the-machine-is-correctly-added-to-the-computing-power-network" tabindex="-1"><a class="header-anchor" href="#check-whether-the-machine-is-correctly-added-to-the-computing-power-network" aria-hidden="true">#</a> Check whether the machine is correctly added to the computing power network</h2><ul><li>Use the official client node to view</li><li>Mine pool build client node For the above two points, please see: install_update_dbc_client_en.md</li><li>After 1 minute, the machine information is requested through the client, and if the machine information can be found, the machine has been added to the network. quest machine info\uFF0Crefer to\uFF1Adbc_client_http_api</li><li>About client nodes: It is recommended that each mining pool set up 2 or more client nodes to ensure that the network can still be normal when the official nodes or other mining pools provide nodes are offline. If there are too few client nodes in the network or hang Too much drop will affect the rental situation of the machine. The client node construction can start a container to deploy on other servers without taking up too much resources.</li><li><strong><em>The client node can be deployed on the same machine as the computing power node. Be careful not to repeat the port number in the conf/core.conf configuration file of each node.</em></strong></li></ul><h2 id="machine-on-the-chain" tabindex="-1"><a class="header-anchor" href="#machine-on-the-chain" aria-hidden="true">#</a> Machine on the chain</h2><p>https://github.com/DeepBrainChain/DBC-DOC/blob/master/chain_ops/machine_online_en.md</p><h2 id="monitoring-setting" tabindex="-1"><a class="header-anchor" href="#monitoring-setting" aria-hidden="true">#</a> Monitoring setting</h2><ul><li>Set the monitoring server address of DBC\uFF1Aadd configuration &quot;dbc_monitor_server=ip:port&quot; in conf/core.conf</li><li>Set the miner&#39;s monitoring server address\uFF1Aadd configuration &quot;miner_monitor_server=ip:port&quot; in conf/core.conf</li><li>Set the renter&#39;s monitoring server address\uFF1Ahttps://deepbrainchain.github.io/DBC-Wiki/en/install-and-update-dbc/dbc-monitor/http-monitor-api.html</li></ul>`,59),o=[t];function l(c,r){return n(),s("div",null,o)}var u=e(i,[["render",l],["__file","install-dbc-compute-node.html.vue"]]);export{u as default};
